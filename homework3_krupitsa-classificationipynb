{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nM5OXSDqVtSO"
   },
   "source": [
    "# Домашнее задание: модели классификации и оценка их качества.\n",
    "\n",
    "Будем тренироваться обучать модели классификации и интерпретировать их качество.\n",
    "\n",
    "Максимальный балл за задание - 10."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7Oeog2lXVtSR"
   },
   "source": [
    "## Часть 1. Обучение моделей классификации (5 баллов).\n",
    "\n",
    "Поработайте с датасетом telecom_churn. Вам предстоит по характеристикам клиента предсказать, уйдет он или нет (целевая колонка - Churn).\n",
    "\n",
    "**A. (1 балл)** Решите задачу с помощью логистической регрессии:\n",
    "- подберите значение гиперпараметров с помощью GridSearchCV\n",
    "Что вы можете сказать об алгоритме? Он переобучился/недообучился/обучился как надо и вы довольны качеством?\n",
    "\n",
    "**B. (1 балл)** Решите задачу с помощью метода опорных векторов (с kernel = 'linear'):\n",
    "- подберите значение гиперпараметров с помощью GridSearchCV\n",
    "Что вы можете сказать об алгоритме? Он переобучился/недообучился/обучился как надо и вы довольны качеством?\n",
    "\n",
    "Не забудьте масштабировать данные перед применением линейных моделей.\n",
    "\n",
    "**C. (1 балл)** Попробуйте увеличить число признаков с помощью добавления полиномиальных признаков. Также можно добавить функции от признаков вручную (те, которые вам кажутся подходящими в данной задаче).\n",
    "Улучшилось ли качество алгоритма?\n",
    "\n",
    "**D. (1 балл)** Постройте матрицу корреляций признаков. Есть ли признаки, которые практически не коррелируют с целевой переменной? Попробуйте их удалить. Есть ли пары сильно коррелирующих между собой признаков? Удалите по одному признаку из каждой пары.\n",
    "Помогло ли это улучшить качество в данной задаче?\n",
    "\n",
    "Пункты C и D можно скомбинировать для достижения наилучшего качества.\n",
    "\n",
    "**E. (1 балл)** Сделайте мини-отчет о проведенной работе. Для этого ответьте на вопросы:\n",
    "a) какой классификатор дал наилучший результат? чему равны значения метрик accuracy, f1-score и ROC-AUC?\n",
    "(Вы можете изначально разбить данные на train и test и сравнивать значения метрик на этих выборках; или же можно оценивать качество алгоритмов по кросс-валидации).\n",
    "\n",
    "b) какие новые признаки вы добавили и какие признаки удалили?\n",
    "\n",
    "c) удалось ли добиться того, что алгоритм не переобучился и не недообучился?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 233,
     "status": "ok",
     "timestamp": 1697441092087,
     "user": {
      "displayName": "Sergey Korpachev",
      "userId": "09181340988160569540"
     },
     "user_tz": -180
    },
    "id": "6GHW0XgcVtSS",
    "outputId": "9489121a-d4f9-45b6-8afc-5f6bfac12ca9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "%pylab is deprecated, use %matplotlib inline and import the required libraries.\n",
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%pylab inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import f1_score \n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import roc_auc_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Сначала базовая предобработка данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "id": "XS6d8CsYVtSU"
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"telecom_churn.csv\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Account length</th>\n",
       "      <th>Area code</th>\n",
       "      <th>International plan</th>\n",
       "      <th>Voice mail plan</th>\n",
       "      <th>Number vmail messages</th>\n",
       "      <th>Total day minutes</th>\n",
       "      <th>Total day calls</th>\n",
       "      <th>Total day charge</th>\n",
       "      <th>Total eve minutes</th>\n",
       "      <th>Total eve calls</th>\n",
       "      <th>Total eve charge</th>\n",
       "      <th>Total night minutes</th>\n",
       "      <th>Total night calls</th>\n",
       "      <th>Total night charge</th>\n",
       "      <th>Total intl minutes</th>\n",
       "      <th>Total intl calls</th>\n",
       "      <th>Total intl charge</th>\n",
       "      <th>Customer service calls</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>KS</td>\n",
       "      <td>128</td>\n",
       "      <td>415</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>25</td>\n",
       "      <td>265.1</td>\n",
       "      <td>110</td>\n",
       "      <td>45.07</td>\n",
       "      <td>197.4</td>\n",
       "      <td>99</td>\n",
       "      <td>16.78</td>\n",
       "      <td>244.7</td>\n",
       "      <td>91</td>\n",
       "      <td>11.01</td>\n",
       "      <td>10.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.70</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OH</td>\n",
       "      <td>107</td>\n",
       "      <td>415</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>26</td>\n",
       "      <td>161.6</td>\n",
       "      <td>123</td>\n",
       "      <td>27.47</td>\n",
       "      <td>195.5</td>\n",
       "      <td>103</td>\n",
       "      <td>16.62</td>\n",
       "      <td>254.4</td>\n",
       "      <td>103</td>\n",
       "      <td>11.45</td>\n",
       "      <td>13.7</td>\n",
       "      <td>3</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NJ</td>\n",
       "      <td>137</td>\n",
       "      <td>415</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>243.4</td>\n",
       "      <td>114</td>\n",
       "      <td>41.38</td>\n",
       "      <td>121.2</td>\n",
       "      <td>110</td>\n",
       "      <td>10.30</td>\n",
       "      <td>162.6</td>\n",
       "      <td>104</td>\n",
       "      <td>7.32</td>\n",
       "      <td>12.2</td>\n",
       "      <td>5</td>\n",
       "      <td>3.29</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>OH</td>\n",
       "      <td>84</td>\n",
       "      <td>408</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>299.4</td>\n",
       "      <td>71</td>\n",
       "      <td>50.90</td>\n",
       "      <td>61.9</td>\n",
       "      <td>88</td>\n",
       "      <td>5.26</td>\n",
       "      <td>196.9</td>\n",
       "      <td>89</td>\n",
       "      <td>8.86</td>\n",
       "      <td>6.6</td>\n",
       "      <td>7</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>OK</td>\n",
       "      <td>75</td>\n",
       "      <td>415</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>166.7</td>\n",
       "      <td>113</td>\n",
       "      <td>28.34</td>\n",
       "      <td>148.3</td>\n",
       "      <td>122</td>\n",
       "      <td>12.61</td>\n",
       "      <td>186.9</td>\n",
       "      <td>121</td>\n",
       "      <td>8.41</td>\n",
       "      <td>10.1</td>\n",
       "      <td>3</td>\n",
       "      <td>2.73</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3328</th>\n",
       "      <td>AZ</td>\n",
       "      <td>192</td>\n",
       "      <td>415</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>36</td>\n",
       "      <td>156.2</td>\n",
       "      <td>77</td>\n",
       "      <td>26.55</td>\n",
       "      <td>215.5</td>\n",
       "      <td>126</td>\n",
       "      <td>18.32</td>\n",
       "      <td>279.1</td>\n",
       "      <td>83</td>\n",
       "      <td>12.56</td>\n",
       "      <td>9.9</td>\n",
       "      <td>6</td>\n",
       "      <td>2.67</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3329</th>\n",
       "      <td>WV</td>\n",
       "      <td>68</td>\n",
       "      <td>415</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>231.1</td>\n",
       "      <td>57</td>\n",
       "      <td>39.29</td>\n",
       "      <td>153.4</td>\n",
       "      <td>55</td>\n",
       "      <td>13.04</td>\n",
       "      <td>191.3</td>\n",
       "      <td>123</td>\n",
       "      <td>8.61</td>\n",
       "      <td>9.6</td>\n",
       "      <td>4</td>\n",
       "      <td>2.59</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3330</th>\n",
       "      <td>RI</td>\n",
       "      <td>28</td>\n",
       "      <td>510</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>180.8</td>\n",
       "      <td>109</td>\n",
       "      <td>30.74</td>\n",
       "      <td>288.8</td>\n",
       "      <td>58</td>\n",
       "      <td>24.55</td>\n",
       "      <td>191.9</td>\n",
       "      <td>91</td>\n",
       "      <td>8.64</td>\n",
       "      <td>14.1</td>\n",
       "      <td>6</td>\n",
       "      <td>3.81</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3331</th>\n",
       "      <td>CT</td>\n",
       "      <td>184</td>\n",
       "      <td>510</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>213.8</td>\n",
       "      <td>105</td>\n",
       "      <td>36.35</td>\n",
       "      <td>159.6</td>\n",
       "      <td>84</td>\n",
       "      <td>13.57</td>\n",
       "      <td>139.2</td>\n",
       "      <td>137</td>\n",
       "      <td>6.26</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10</td>\n",
       "      <td>1.35</td>\n",
       "      <td>2</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3332</th>\n",
       "      <td>TN</td>\n",
       "      <td>74</td>\n",
       "      <td>415</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>25</td>\n",
       "      <td>234.4</td>\n",
       "      <td>113</td>\n",
       "      <td>39.85</td>\n",
       "      <td>265.9</td>\n",
       "      <td>82</td>\n",
       "      <td>22.60</td>\n",
       "      <td>241.4</td>\n",
       "      <td>77</td>\n",
       "      <td>10.86</td>\n",
       "      <td>13.7</td>\n",
       "      <td>4</td>\n",
       "      <td>3.70</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3333 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     State  Account length  Area code International plan Voice mail plan  \\\n",
       "0       KS             128        415                 No             Yes   \n",
       "1       OH             107        415                 No             Yes   \n",
       "2       NJ             137        415                 No              No   \n",
       "3       OH              84        408                Yes              No   \n",
       "4       OK              75        415                Yes              No   \n",
       "...    ...             ...        ...                ...             ...   \n",
       "3328    AZ             192        415                 No             Yes   \n",
       "3329    WV              68        415                 No              No   \n",
       "3330    RI              28        510                 No              No   \n",
       "3331    CT             184        510                Yes              No   \n",
       "3332    TN              74        415                 No             Yes   \n",
       "\n",
       "      Number vmail messages  Total day minutes  Total day calls  \\\n",
       "0                        25              265.1              110   \n",
       "1                        26              161.6              123   \n",
       "2                         0              243.4              114   \n",
       "3                         0              299.4               71   \n",
       "4                         0              166.7              113   \n",
       "...                     ...                ...              ...   \n",
       "3328                     36              156.2               77   \n",
       "3329                      0              231.1               57   \n",
       "3330                      0              180.8              109   \n",
       "3331                      0              213.8              105   \n",
       "3332                     25              234.4              113   \n",
       "\n",
       "      Total day charge  Total eve minutes  Total eve calls  Total eve charge  \\\n",
       "0                45.07              197.4               99             16.78   \n",
       "1                27.47              195.5              103             16.62   \n",
       "2                41.38              121.2              110             10.30   \n",
       "3                50.90               61.9               88              5.26   \n",
       "4                28.34              148.3              122             12.61   \n",
       "...                ...                ...              ...               ...   \n",
       "3328             26.55              215.5              126             18.32   \n",
       "3329             39.29              153.4               55             13.04   \n",
       "3330             30.74              288.8               58             24.55   \n",
       "3331             36.35              159.6               84             13.57   \n",
       "3332             39.85              265.9               82             22.60   \n",
       "\n",
       "      Total night minutes  Total night calls  Total night charge  \\\n",
       "0                   244.7                 91               11.01   \n",
       "1                   254.4                103               11.45   \n",
       "2                   162.6                104                7.32   \n",
       "3                   196.9                 89                8.86   \n",
       "4                   186.9                121                8.41   \n",
       "...                   ...                ...                 ...   \n",
       "3328                279.1                 83               12.56   \n",
       "3329                191.3                123                8.61   \n",
       "3330                191.9                 91                8.64   \n",
       "3331                139.2                137                6.26   \n",
       "3332                241.4                 77               10.86   \n",
       "\n",
       "      Total intl minutes  Total intl calls  Total intl charge  \\\n",
       "0                   10.0                 3               2.70   \n",
       "1                   13.7                 3               3.70   \n",
       "2                   12.2                 5               3.29   \n",
       "3                    6.6                 7               1.78   \n",
       "4                   10.1                 3               2.73   \n",
       "...                  ...               ...                ...   \n",
       "3328                 9.9                 6               2.67   \n",
       "3329                 9.6                 4               2.59   \n",
       "3330                14.1                 6               3.81   \n",
       "3331                 5.0                10               1.35   \n",
       "3332                13.7                 4               3.70   \n",
       "\n",
       "      Customer service calls  Churn  \n",
       "0                          1  False  \n",
       "1                          1  False  \n",
       "2                          0  False  \n",
       "3                          2  False  \n",
       "4                          3  False  \n",
       "...                      ...    ...  \n",
       "3328                       2  False  \n",
       "3329                       3  False  \n",
       "3330                       2  False  \n",
       "3331                       2  False  \n",
       "3332                       0  False  \n",
       "\n",
       "[3333 rows x 20 columns]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Account length</th>\n",
       "      <th>Area code</th>\n",
       "      <th>Number vmail messages</th>\n",
       "      <th>Total day minutes</th>\n",
       "      <th>Total day calls</th>\n",
       "      <th>Total day charge</th>\n",
       "      <th>Total eve minutes</th>\n",
       "      <th>Total eve calls</th>\n",
       "      <th>Total eve charge</th>\n",
       "      <th>Total night minutes</th>\n",
       "      <th>Total night calls</th>\n",
       "      <th>Total night charge</th>\n",
       "      <th>Total intl minutes</th>\n",
       "      <th>Total intl calls</th>\n",
       "      <th>Total intl charge</th>\n",
       "      <th>Customer service calls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "      <td>3333.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>101.064806</td>\n",
       "      <td>437.182418</td>\n",
       "      <td>8.099010</td>\n",
       "      <td>179.775098</td>\n",
       "      <td>100.435644</td>\n",
       "      <td>30.562307</td>\n",
       "      <td>200.980348</td>\n",
       "      <td>100.114311</td>\n",
       "      <td>17.083540</td>\n",
       "      <td>200.872037</td>\n",
       "      <td>100.107711</td>\n",
       "      <td>9.039325</td>\n",
       "      <td>10.237294</td>\n",
       "      <td>4.479448</td>\n",
       "      <td>2.764581</td>\n",
       "      <td>1.562856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>39.822106</td>\n",
       "      <td>42.371290</td>\n",
       "      <td>13.688365</td>\n",
       "      <td>54.467389</td>\n",
       "      <td>20.069084</td>\n",
       "      <td>9.259435</td>\n",
       "      <td>50.713844</td>\n",
       "      <td>19.922625</td>\n",
       "      <td>4.310668</td>\n",
       "      <td>50.573847</td>\n",
       "      <td>19.568609</td>\n",
       "      <td>2.275873</td>\n",
       "      <td>2.791840</td>\n",
       "      <td>2.461214</td>\n",
       "      <td>0.753773</td>\n",
       "      <td>1.315491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23.200000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>1.040000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>74.000000</td>\n",
       "      <td>408.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>143.700000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>24.430000</td>\n",
       "      <td>166.600000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>14.160000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>7.520000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.300000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>101.000000</td>\n",
       "      <td>415.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>179.400000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>201.400000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>17.120000</td>\n",
       "      <td>201.200000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>9.050000</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.780000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>127.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>216.400000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>36.790000</td>\n",
       "      <td>235.300000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>235.300000</td>\n",
       "      <td>113.000000</td>\n",
       "      <td>10.590000</td>\n",
       "      <td>12.100000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.270000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>243.000000</td>\n",
       "      <td>510.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>350.800000</td>\n",
       "      <td>165.000000</td>\n",
       "      <td>59.640000</td>\n",
       "      <td>363.700000</td>\n",
       "      <td>170.000000</td>\n",
       "      <td>30.910000</td>\n",
       "      <td>395.000000</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>17.770000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Account length    Area code  Number vmail messages  Total day minutes  \\\n",
       "count     3333.000000  3333.000000            3333.000000        3333.000000   \n",
       "mean       101.064806   437.182418               8.099010         179.775098   \n",
       "std         39.822106    42.371290              13.688365          54.467389   \n",
       "min          1.000000   408.000000               0.000000           0.000000   \n",
       "25%         74.000000   408.000000               0.000000         143.700000   \n",
       "50%        101.000000   415.000000               0.000000         179.400000   \n",
       "75%        127.000000   510.000000              20.000000         216.400000   \n",
       "max        243.000000   510.000000              51.000000         350.800000   \n",
       "\n",
       "       Total day calls  Total day charge  Total eve minutes  Total eve calls  \\\n",
       "count      3333.000000       3333.000000        3333.000000      3333.000000   \n",
       "mean        100.435644         30.562307         200.980348       100.114311   \n",
       "std          20.069084          9.259435          50.713844        19.922625   \n",
       "min           0.000000          0.000000           0.000000         0.000000   \n",
       "25%          87.000000         24.430000         166.600000        87.000000   \n",
       "50%         101.000000         30.500000         201.400000       100.000000   \n",
       "75%         114.000000         36.790000         235.300000       114.000000   \n",
       "max         165.000000         59.640000         363.700000       170.000000   \n",
       "\n",
       "       Total eve charge  Total night minutes  Total night calls  \\\n",
       "count       3333.000000          3333.000000        3333.000000   \n",
       "mean          17.083540           200.872037         100.107711   \n",
       "std            4.310668            50.573847          19.568609   \n",
       "min            0.000000            23.200000          33.000000   \n",
       "25%           14.160000           167.000000          87.000000   \n",
       "50%           17.120000           201.200000         100.000000   \n",
       "75%           20.000000           235.300000         113.000000   \n",
       "max           30.910000           395.000000         175.000000   \n",
       "\n",
       "       Total night charge  Total intl minutes  Total intl calls  \\\n",
       "count         3333.000000         3333.000000       3333.000000   \n",
       "mean             9.039325           10.237294          4.479448   \n",
       "std              2.275873            2.791840          2.461214   \n",
       "min              1.040000            0.000000          0.000000   \n",
       "25%              7.520000            8.500000          3.000000   \n",
       "50%              9.050000           10.300000          4.000000   \n",
       "75%             10.590000           12.100000          6.000000   \n",
       "max             17.770000           20.000000         20.000000   \n",
       "\n",
       "       Total intl charge  Customer service calls  \n",
       "count        3333.000000             3333.000000  \n",
       "mean            2.764581                1.562856  \n",
       "std             0.753773                1.315491  \n",
       "min             0.000000                0.000000  \n",
       "25%             2.300000                1.000000  \n",
       "50%             2.780000                1.000000  \n",
       "75%             3.270000                2.000000  \n",
       "max             5.400000                9.000000  "
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3333, 20)"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop('Churn', axis=1)\n",
    "y = df['Churn']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True])"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(y.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    2850\n",
       "True      483\n",
       "Name: Churn, dtype: int64"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.value_counts() #Сильный дисбаланс классов, нельзя использовать экьюраси, буду использовать ф1 меру"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State                     0\n",
       "Account length            0\n",
       "Area code                 0\n",
       "International plan        0\n",
       "Voice mail plan           0\n",
       "Number vmail messages     0\n",
       "Total day minutes         0\n",
       "Total day calls           0\n",
       "Total day charge          0\n",
       "Total eve minutes         0\n",
       "Total eve calls           0\n",
       "Total eve charge          0\n",
       "Total night minutes       0\n",
       "Total night calls         0\n",
       "Total night charge        0\n",
       "Total intl minutes        0\n",
       "Total intl calls          0\n",
       "Total intl charge         0\n",
       "Customer service calls    0\n",
       "Churn                     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.isnull(df).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State                      object\n",
       "Account length              int64\n",
       "Area code                   int64\n",
       "International plan         object\n",
       "Voice mail plan            object\n",
       "Number vmail messages       int64\n",
       "Total day minutes         float64\n",
       "Total day calls             int64\n",
       "Total day charge          float64\n",
       "Total eve minutes         float64\n",
       "Total eve calls             int64\n",
       "Total eve charge          float64\n",
       "Total night minutes       float64\n",
       "Total night calls           int64\n",
       "Total night charge        float64\n",
       "Total intl minutes        float64\n",
       "Total intl calls            int64\n",
       "Total intl charge         float64\n",
       "Customer service calls      int64\n",
       "Churn                        bool\n",
       "dtype: object"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропусков нет, перекодируем категориальные переменные: State, area code, International plan, Voice mail plan "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA',\n",
       "       'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME',\n",
       "       'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM',\n",
       "       'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX',\n",
       "       'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY'], dtype=object)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(df['State'].values) # - кодируем one hot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([408, 415, 510])"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(df['Area code'].values)# - кодируем one hot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['No', 'Yes'], dtype=object)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(df['International plan'].values) # - кодируем 1 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['No', 'Yes'], dtype=object)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(df['Voice mail plan'].values) # - кодируем 1 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "one_hot = pd.get_dummies(X['Area code'])\n",
    "X = X.drop('Area code',axis = 1)\n",
    "X = X.join(one_hot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "one_hot = pd.get_dummies(X['State'])\n",
    "X = X.drop('State',axis = 1)\n",
    "X = X.join(one_hot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([        'Account length',     'International plan',\n",
       "              'Voice mail plan',  'Number vmail messages',\n",
       "            'Total day minutes',        'Total day calls',\n",
       "             'Total day charge',      'Total eve minutes',\n",
       "              'Total eve calls',       'Total eve charge',\n",
       "          'Total night minutes',      'Total night calls',\n",
       "           'Total night charge',     'Total intl minutes',\n",
       "             'Total intl calls',      'Total intl charge',\n",
       "       'Customer service calls',                      408,\n",
       "                            415,                      510,\n",
       "                           'AK',                     'AL',\n",
       "                           'AR',                     'AZ',\n",
       "                           'CA',                     'CO',\n",
       "                           'CT',                     'DC',\n",
       "                           'DE',                     'FL',\n",
       "                           'GA',                     'HI',\n",
       "                           'IA',                     'ID',\n",
       "                           'IL',                     'IN',\n",
       "                           'KS',                     'KY',\n",
       "                           'LA',                     'MA',\n",
       "                           'MD',                     'ME',\n",
       "                           'MI',                     'MN',\n",
       "                           'MO',                     'MS',\n",
       "                           'MT',                     'NC',\n",
       "                           'ND',                     'NE',\n",
       "                           'NH',                     'NJ',\n",
       "                           'NM',                     'NV',\n",
       "                           'NY',                     'OH',\n",
       "                           'OK',                     'OR',\n",
       "                           'PA',                     'RI',\n",
       "                           'SC',                     'SD',\n",
       "                           'TN',                     'TX',\n",
       "                           'UT',                     'VA',\n",
       "                           'VT',                     'WA',\n",
       "                           'WI',                     'WV',\n",
       "                           'WY'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "X.rename(columns = {408: '408', 415: '415', 510: '510'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "ord_enc = OrdinalEncoder()\n",
    "X['International plan'] = ord_enc.fit_transform(X[['International plan']])\n",
    "X['Voice mail plan'] = ord_enc.fit_transform(X[['Voice mail plan']])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train_1, X_test_1, y_train, y_test = train_test_split(X, y, test_size=0.3) \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "sc = StandardScaler()\n",
    "X_train = sc.fit_transform(X_train_1)\n",
    "X_test = sc.transform(X_test_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.95921138,  3.06086408,  1.64234767, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999],\n",
       "       [-1.53530293, -0.32670513,  1.64234767, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999],\n",
       "       [-1.63549277, -0.32670513,  1.64234767, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999],\n",
       "       ...,\n",
       "       [ 1.34515482,  3.06086408,  1.64234767, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999],\n",
       "       [ 1.44534466, -0.32670513, -0.60888448, ..., -0.14949521,\n",
       "         5.44952919, -0.15966999],\n",
       "       [ 0.31820901, -0.32670513, -0.60888448, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999]])"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.21991753, -0.32670513,  1.64234767, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999],\n",
       "       [-2.06129957, -0.32670513, -0.60888448, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999],\n",
       "       [-0.40816729, -0.32670513, -0.60888448, ..., -0.14949521,\n",
       "         5.44952919, -0.15966999],\n",
       "       ...,\n",
       "       [-0.33302491, -0.32670513, -0.60888448, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999],\n",
       "       [ 0.2681141 , -0.32670513,  1.64234767, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999],\n",
       "       [-0.55845204, -0.32670513, -0.60888448, ..., -0.14949521,\n",
       "        -0.18350209, -0.15966999]])"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A. (1 балл)** Решите задачу с помощью логистической регрессии:\n",
    "- подберите значение гиперпараметров с помощью GridSearchCV\n",
    "Что вы можете сказать об алгоритме? Он переобучился/недообучился/обучился как надо и вы довольны качеством?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best score: 0.3385359536774022\n",
      "best params: {'C': 0.8, 'solver': 'lbfgs'}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "\n",
    "params = {'C': np.arange(0.1,1.1,0.1),\n",
    "         'solver': ['lbfgs', 'liblinear', 'newton-cg', 'newton-cholesky', 'sag', 'saga']}\n",
    "grid = GridSearchCV(LogisticRegression(multi_class='auto'), \n",
    "                    params, \n",
    "                    scoring = 'f1')\n",
    "\n",
    "grid.fit(X_train, y_train)\n",
    "\n",
    "print('best score:', grid.best_score_)\n",
    "print('best params:', grid.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 train:  0.38211382113821135\n",
      "F1 test:  0.35348837209302325\n",
      "\n",
      "roc_auc_score train:  0.6233636158032785\n",
      "roc_auc_score test:  0.6137971746794474\n",
      "\n",
      "accuracy_score train:  0.8696956708101158\n",
      "accuracy_score test:  0.861\n"
     ]
    }
   ],
   "source": [
    "model = LogisticRegression(solver='lbfgs', multi_class='auto', C = 0.8)\n",
    "\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "pred_train = model.predict(X_train)\n",
    "pred_test = model.predict(X_test)\n",
    "print('F1 train: ', f1_score(y_train, pred_train))\n",
    "print('F1 test: ', f1_score(y_test, pred_test))\n",
    "print()\n",
    "print('roc_auc_score train: ', roc_auc_score(y_train, pred_train))\n",
    "print('roc_auc_score test: ', roc_auc_score(y_test, pred_test))\n",
    "print()\n",
    "print('accuracy_score train: ', accuracy_score(y_train, pred_train))\n",
    "print('accuracy_score test: ', accuracy_score(y_test, pred_test))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "F1 score довольно маленький, веоятно можно лучше. Но зато модель переобучилась: на трейне качество лучше, чем на тесте, но не слишком сильно. Accuracy не показетельный, потому что у нас дисбаланс классов и мы можем получить высокое качество даже на константной модели."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**B. (1 балл)** Решите задачу с помощью метода опорных векторов (с kernel = 'linear'):\n",
    "- подберите значение гиперпараметров с помощью GridSearchCV\n",
    "Что вы можете сказать об алгоритме? Он переобучился/недообучился/обучился как надо и вы довольны качеством?\n",
    "\n",
    "Не забудьте масштабировать данные перед применением линейных моделей."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best score: 0.2460005003261117\n",
      "best params: {'C': 1}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "params = {'C': [0.001, 0.01, 0.1, 1]}\n",
    "grid = GridSearchCV(LinearSVC(),\n",
    "                    params,\n",
    "                    scoring = 'f1')\n",
    "\n",
    "grid.fit(X_train, y_train)\n",
    "\n",
    "print('best score:', grid.best_score_)\n",
    "print('best params:', grid.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 train:  0.28054298642533937\n",
      "F1 test:  0.35294117647058826\n",
      "\n",
      "roc_auc_score train:  0.5812760521715745\n",
      "roc_auc_score test:  0.6098845324197437\n",
      "\n",
      "accuracy_score train:  0.8636948135447922\n",
      "accuracy_score test:  0.868\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "\n",
    "SVM_model = svm.LinearSVC(C = 1)\n",
    "\n",
    "SVM_model.fit(X_train, y_train)\n",
    "pred_train_svm = SVM_model.predict(X_train)\n",
    "pred_test_svm = SVM_model.predict(X_test)\n",
    "\n",
    "print('F1 train: ', f1_score(y_train, pred_train_svm))\n",
    "print('F1 test: ', f1_score(y_test, pred_test_svm))\n",
    "print()\n",
    "print('roc_auc_score train: ', roc_auc_score(y_train, pred_train_svm))\n",
    "print('roc_auc_score test: ', roc_auc_score(y_test, pred_test_svm))\n",
    "print()\n",
    "print('accuracy_score train: ', accuracy_score(y_train, pred_train_svm))\n",
    "print('accuracy_score test: ', accuracy_score(y_test, pred_test_svm))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Качество модели ухудшилось, переобучения все еще нет."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**C. (1 балл)** Попробуйте увеличить число признаков с помощью добавления полиномиальных признаков. Также можно добавить функции от признаков вручную (те, которые вам кажутся подходящими в данной задаче).\n",
    "Улучшилось ли качество алгоритма?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>2618</th>\n",
       "      <th>2619</th>\n",
       "      <th>2620</th>\n",
       "      <th>2621</th>\n",
       "      <th>2622</th>\n",
       "      <th>2623</th>\n",
       "      <th>2624</th>\n",
       "      <th>2625</th>\n",
       "      <th>2626</th>\n",
       "      <th>2627</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.959211</td>\n",
       "      <td>3.060864</td>\n",
       "      <td>1.642348</td>\n",
       "      <td>2.085189</td>\n",
       "      <td>0.334493</td>\n",
       "      <td>0.478463</td>\n",
       "      <td>0.334436</td>\n",
       "      <td>1.795344</td>\n",
       "      <td>0.536934</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>0.027433</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.029300</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.535303</td>\n",
       "      <td>-0.326705</td>\n",
       "      <td>1.642348</td>\n",
       "      <td>1.714649</td>\n",
       "      <td>0.798826</td>\n",
       "      <td>-1.566325</td>\n",
       "      <td>0.798875</td>\n",
       "      <td>-1.302870</td>\n",
       "      <td>-0.954159</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>0.027433</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.029300</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.635493</td>\n",
       "      <td>-0.326705</td>\n",
       "      <td>1.642348</td>\n",
       "      <td>1.640541</td>\n",
       "      <td>-0.617660</td>\n",
       "      <td>1.376175</td>\n",
       "      <td>-0.617825</td>\n",
       "      <td>-0.749617</td>\n",
       "      <td>-1.003862</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>0.027433</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.029300</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.368304</td>\n",
       "      <td>-0.326705</td>\n",
       "      <td>1.642348</td>\n",
       "      <td>1.121785</td>\n",
       "      <td>1.310134</td>\n",
       "      <td>-1.117469</td>\n",
       "      <td>1.310077</td>\n",
       "      <td>-1.215930</td>\n",
       "      <td>1.033966</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>0.027433</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.029300</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.620677</td>\n",
       "      <td>-0.326705</td>\n",
       "      <td>-0.608884</td>\n",
       "      <td>-0.582699</td>\n",
       "      <td>0.726556</td>\n",
       "      <td>0.278972</td>\n",
       "      <td>0.726605</td>\n",
       "      <td>-0.447304</td>\n",
       "      <td>0.884856</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>0.027433</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.029300</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2328</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.508357</td>\n",
       "      <td>3.060864</td>\n",
       "      <td>-0.608884</td>\n",
       "      <td>-0.582699</td>\n",
       "      <td>0.847608</td>\n",
       "      <td>0.229099</td>\n",
       "      <td>0.847763</td>\n",
       "      <td>0.218575</td>\n",
       "      <td>0.984262</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>0.027433</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.029300</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2329</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.810825</td>\n",
       "      <td>-0.326705</td>\n",
       "      <td>-0.608884</td>\n",
       "      <td>-0.582699</td>\n",
       "      <td>2.397793</td>\n",
       "      <td>0.129353</td>\n",
       "      <td>2.397312</td>\n",
       "      <td>0.313418</td>\n",
       "      <td>2.525059</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>0.027433</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.029300</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2330</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.345155</td>\n",
       "      <td>3.060864</td>\n",
       "      <td>1.642348</td>\n",
       "      <td>1.344109</td>\n",
       "      <td>0.563949</td>\n",
       "      <td>1.027065</td>\n",
       "      <td>0.563998</td>\n",
       "      <td>-1.210002</td>\n",
       "      <td>1.133372</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>0.027433</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.029300</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2331</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.445345</td>\n",
       "      <td>-0.326705</td>\n",
       "      <td>-0.608884</td>\n",
       "      <td>-0.582699</td>\n",
       "      <td>-0.193076</td>\n",
       "      <td>0.677955</td>\n",
       "      <td>-0.192709</td>\n",
       "      <td>-0.054100</td>\n",
       "      <td>0.238716</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>-0.755549</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>-0.814678</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>29.697368</td>\n",
       "      <td>-0.870126</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2332</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.318209</td>\n",
       "      <td>-0.326705</td>\n",
       "      <td>-0.608884</td>\n",
       "      <td>-0.582699</td>\n",
       "      <td>-0.455054</td>\n",
       "      <td>-1.267088</td>\n",
       "      <td>-0.455218</td>\n",
       "      <td>-0.603400</td>\n",
       "      <td>-0.655941</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019222</td>\n",
       "      <td>0.020727</td>\n",
       "      <td>0.025442</td>\n",
       "      <td>0.022137</td>\n",
       "      <td>0.022349</td>\n",
       "      <td>0.027433</td>\n",
       "      <td>0.02387</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.029300</td>\n",
       "      <td>0.025495</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2333 rows × 2628 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      0         1         2         3         4         5         6     \\\n",
       "0      1.0 -0.959211  3.060864  1.642348  2.085189  0.334493  0.478463   \n",
       "1      1.0 -1.535303 -0.326705  1.642348  1.714649  0.798826 -1.566325   \n",
       "2      1.0 -1.635493 -0.326705  1.642348  1.640541 -0.617660  1.376175   \n",
       "3      1.0  0.368304 -0.326705  1.642348  1.121785  1.310134 -1.117469   \n",
       "4      1.0  1.620677 -0.326705 -0.608884 -0.582699  0.726556  0.278972   \n",
       "...    ...       ...       ...       ...       ...       ...       ...   \n",
       "2328   1.0 -0.508357  3.060864 -0.608884 -0.582699  0.847608  0.229099   \n",
       "2329   1.0 -1.810825 -0.326705 -0.608884 -0.582699  2.397793  0.129353   \n",
       "2330   1.0  1.345155  3.060864  1.642348  1.344109  0.563949  1.027065   \n",
       "2331   1.0  1.445345 -0.326705 -0.608884 -0.582699 -0.193076  0.677955   \n",
       "2332   1.0  0.318209 -0.326705 -0.608884 -0.582699 -0.455054 -1.267088   \n",
       "\n",
       "          7         8         9     ...      2618      2619      2620  \\\n",
       "0     0.334436  1.795344  0.536934  ...  0.019222  0.020727  0.025442   \n",
       "1     0.798875 -1.302870 -0.954159  ...  0.019222  0.020727  0.025442   \n",
       "2    -0.617825 -0.749617 -1.003862  ...  0.019222  0.020727  0.025442   \n",
       "3     1.310077 -1.215930  1.033966  ...  0.019222  0.020727  0.025442   \n",
       "4     0.726605 -0.447304  0.884856  ...  0.019222  0.020727  0.025442   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "2328  0.847763  0.218575  0.984262  ...  0.019222  0.020727  0.025442   \n",
       "2329  2.397312  0.313418  2.525059  ...  0.019222  0.020727  0.025442   \n",
       "2330  0.563998 -1.210002  1.133372  ...  0.019222  0.020727  0.025442   \n",
       "2331 -0.192709 -0.054100  0.238716  ...  0.019222  0.020727 -0.755549   \n",
       "2332 -0.455218 -0.603400 -0.655941  ...  0.019222  0.020727  0.025442   \n",
       "\n",
       "          2621      2622      2623     2624       2625      2626      2627  \n",
       "0     0.022137  0.022349  0.027433  0.02387   0.033673  0.029300  0.025495  \n",
       "1     0.022137  0.022349  0.027433  0.02387   0.033673  0.029300  0.025495  \n",
       "2     0.022137  0.022349  0.027433  0.02387   0.033673  0.029300  0.025495  \n",
       "3     0.022137  0.022349  0.027433  0.02387   0.033673  0.029300  0.025495  \n",
       "4     0.022137  0.022349  0.027433  0.02387   0.033673  0.029300  0.025495  \n",
       "...        ...       ...       ...      ...        ...       ...       ...  \n",
       "2328  0.022137  0.022349  0.027433  0.02387   0.033673  0.029300  0.025495  \n",
       "2329  0.022137  0.022349  0.027433  0.02387   0.033673  0.029300  0.025495  \n",
       "2330  0.022137  0.022349  0.027433  0.02387   0.033673  0.029300  0.025495  \n",
       "2331  0.022137  0.022349 -0.814678  0.02387  29.697368 -0.870126  0.025495  \n",
       "2332  0.022137  0.022349  0.027433  0.02387   0.033673  0.029300  0.025495  \n",
       "\n",
       "[2333 rows x 2628 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "poly = PolynomialFeatures(2)\n",
    "\n",
    "X_train_poly = poly.fit_transform(X_train)\n",
    "X_test_poly = poly.transform(X_test)\n",
    "\n",
    "\n",
    "pd.DataFrame(X_train_poly)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LogReg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best score: 0.46736531760922\n",
      "best params: {'C': 0.5, 'solver': 'liblinear'}\n"
     ]
    }
   ],
   "source": [
    "params = {'C': np.arange(0.1,1.1,0.1),\n",
    "         'solver': ['lbfgs', 'liblinear']}\n",
    "grid = GridSearchCV(LogisticRegression(multi_class='auto'), \n",
    "                    params, \n",
    "                    scoring = 'f1')\n",
    "\n",
    "grid.fit(X_train_poly, y_train)\n",
    "\n",
    "print('best score:', grid.best_score_)\n",
    "print('best params:', grid.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 train:  1.0\n",
      "F1 test:  0.5017421602787456\n",
      "\n",
      "roc_auc_score train:  1.0\n",
      "roc_auc_score test:  0.7039239944169522\n",
      "\n",
      "accuracy_score train:  1.0\n",
      "accuracy_score test:  0.857\n"
     ]
    }
   ],
   "source": [
    "model = LogisticRegression(solver='liblinear', multi_class='auto', C = 0.5)\n",
    "\n",
    "model.fit(X_train_poly, y_train)\n",
    "\n",
    "pred_train = model.predict(X_train_poly)\n",
    "pred_test = model.predict(X_test_poly)\n",
    "print('F1 train: ', f1_score(y_train, pred_train))\n",
    "print('F1 test: ', f1_score(y_test, pred_test))\n",
    "print()\n",
    "print('roc_auc_score train: ', roc_auc_score(y_train, pred_train))\n",
    "print('roc_auc_score test: ', roc_auc_score(y_test, pred_test))\n",
    "print()\n",
    "print('accuracy_score train: ', accuracy_score(y_train, pred_train))\n",
    "print('accuracy_score test: ', accuracy_score(y_test, pred_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best score: 0.5394195162567613\n",
      "best params: {'C': 0.001}\n"
     ]
    }
   ],
   "source": [
    "params = {'C': [0.001, 0.01, 0.1, 1]}\n",
    "grid = GridSearchCV(LinearSVC(),\n",
    "                    params,\n",
    "                    scoring = 'f1')\n",
    "\n",
    "grid.fit(X_train_poly, y_train)\n",
    "\n",
    "print('best score:', grid.best_score_)\n",
    "print('best params:', grid.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 train:  0.9093799682034976\n",
      "F1 test:  0.5217391304347825\n",
      "\n",
      "roc_auc_score train:  0.917877524885376\n",
      "roc_auc_score test:  0.7072672330517921\n",
      "\n",
      "accuracy_score train:  0.9755679382768967\n",
      "accuracy_score test:  0.879\n"
     ]
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "\n",
    "SVM_model = svm.LinearSVC(C = 0.001)\n",
    "\n",
    "SVM_model.fit(X_train_poly, y_train)\n",
    "pred_train_svm = SVM_model.predict(X_train_poly)\n",
    "pred_test_svm = SVM_model.predict(X_test_poly)\n",
    "\n",
    "print('F1 train: ', f1_score(y_train, pred_train_svm))\n",
    "print('F1 test: ', f1_score(y_test, pred_test_svm))\n",
    "print()\n",
    "print('roc_auc_score train: ', roc_auc_score(y_train, pred_train_svm))\n",
    "print('roc_auc_score test: ', roc_auc_score(y_test, pred_test_svm))\n",
    "print()\n",
    "print('accuracy_score train: ', accuracy_score(y_train, pred_train_svm))\n",
    "print('accuracy_score test: ', accuracy_score(y_test, pred_test_svm))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ну тут определееенно переобучение произошло, потому тчо 1 на трейне - это очень очень явный символ переобучения. Но при этом в общем качество модели на тесте выросло смотря на ф1 и рок аук, по сравнению с прошлыми моделями. При этом у SVM качество получилось чуть лучше, а переобучение - меньше."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**D. (1 балл)** Постройте матрицу корреляций признаков. Есть ли признаки, которые практически не коррелируют с целевой переменной? Попробуйте их удалить. Есть ли пары сильно коррелирующих между собой признаков? Удалите по одному признаку из каждой пары.\n",
    "Помогло ли это улучшить качество в данной задаче?\n",
    "\n",
    "Пункты C и D можно скомбинировать для достижения наилучшего качества."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/4n/kkp00v5n3zsd0hmt4dvr20nm0000gn/T/ipykernel_1396/1390095648.py:4: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
      "  corr = df.corr()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "plt.figure()\n",
    "corr = df.corr()\n",
    "sns.heatmap(corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Account length</th>\n",
       "      <th>Area code</th>\n",
       "      <th>Number vmail messages</th>\n",
       "      <th>Total day minutes</th>\n",
       "      <th>Total day calls</th>\n",
       "      <th>Total day charge</th>\n",
       "      <th>Total eve minutes</th>\n",
       "      <th>Total eve calls</th>\n",
       "      <th>Total eve charge</th>\n",
       "      <th>Total night minutes</th>\n",
       "      <th>Total night calls</th>\n",
       "      <th>Total night charge</th>\n",
       "      <th>Total intl minutes</th>\n",
       "      <th>Total intl calls</th>\n",
       "      <th>Total intl charge</th>\n",
       "      <th>Customer service calls</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Account length</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.012463</td>\n",
       "      <td>-0.004628</td>\n",
       "      <td>0.006216</td>\n",
       "      <td>0.038470</td>\n",
       "      <td>0.006214</td>\n",
       "      <td>-0.006757</td>\n",
       "      <td>0.019260</td>\n",
       "      <td>-0.006745</td>\n",
       "      <td>-0.008955</td>\n",
       "      <td>-0.013176</td>\n",
       "      <td>-0.008960</td>\n",
       "      <td>0.009514</td>\n",
       "      <td>0.020661</td>\n",
       "      <td>0.009546</td>\n",
       "      <td>-0.003796</td>\n",
       "      <td>0.016541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Area code</th>\n",
       "      <td>-0.012463</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.001994</td>\n",
       "      <td>-0.008264</td>\n",
       "      <td>-0.009646</td>\n",
       "      <td>-0.008264</td>\n",
       "      <td>0.003580</td>\n",
       "      <td>-0.011886</td>\n",
       "      <td>0.003607</td>\n",
       "      <td>-0.005825</td>\n",
       "      <td>0.016522</td>\n",
       "      <td>-0.005845</td>\n",
       "      <td>-0.018288</td>\n",
       "      <td>-0.024179</td>\n",
       "      <td>-0.018395</td>\n",
       "      <td>0.027572</td>\n",
       "      <td>0.006174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Number vmail messages</th>\n",
       "      <td>-0.004628</td>\n",
       "      <td>-0.001994</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000778</td>\n",
       "      <td>-0.009548</td>\n",
       "      <td>0.000776</td>\n",
       "      <td>0.017562</td>\n",
       "      <td>-0.005864</td>\n",
       "      <td>0.017578</td>\n",
       "      <td>0.007681</td>\n",
       "      <td>0.007123</td>\n",
       "      <td>0.007663</td>\n",
       "      <td>0.002856</td>\n",
       "      <td>0.013957</td>\n",
       "      <td>0.002884</td>\n",
       "      <td>-0.013263</td>\n",
       "      <td>-0.089728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total day minutes</th>\n",
       "      <td>0.006216</td>\n",
       "      <td>-0.008264</td>\n",
       "      <td>0.000778</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.006750</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.007043</td>\n",
       "      <td>0.015769</td>\n",
       "      <td>0.007029</td>\n",
       "      <td>0.004323</td>\n",
       "      <td>0.022972</td>\n",
       "      <td>0.004300</td>\n",
       "      <td>-0.010155</td>\n",
       "      <td>0.008033</td>\n",
       "      <td>-0.010092</td>\n",
       "      <td>-0.013423</td>\n",
       "      <td>0.205151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total day calls</th>\n",
       "      <td>0.038470</td>\n",
       "      <td>-0.009646</td>\n",
       "      <td>-0.009548</td>\n",
       "      <td>0.006750</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.006753</td>\n",
       "      <td>-0.021451</td>\n",
       "      <td>0.006462</td>\n",
       "      <td>-0.021449</td>\n",
       "      <td>0.022938</td>\n",
       "      <td>-0.019557</td>\n",
       "      <td>0.022927</td>\n",
       "      <td>0.021565</td>\n",
       "      <td>0.004574</td>\n",
       "      <td>0.021666</td>\n",
       "      <td>-0.018942</td>\n",
       "      <td>0.018459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total day charge</th>\n",
       "      <td>0.006214</td>\n",
       "      <td>-0.008264</td>\n",
       "      <td>0.000776</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.006753</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.007050</td>\n",
       "      <td>0.015769</td>\n",
       "      <td>0.007036</td>\n",
       "      <td>0.004324</td>\n",
       "      <td>0.022972</td>\n",
       "      <td>0.004301</td>\n",
       "      <td>-0.010157</td>\n",
       "      <td>0.008032</td>\n",
       "      <td>-0.010094</td>\n",
       "      <td>-0.013427</td>\n",
       "      <td>0.205151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total eve minutes</th>\n",
       "      <td>-0.006757</td>\n",
       "      <td>0.003580</td>\n",
       "      <td>0.017562</td>\n",
       "      <td>0.007043</td>\n",
       "      <td>-0.021451</td>\n",
       "      <td>0.007050</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.011430</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.012584</td>\n",
       "      <td>0.007586</td>\n",
       "      <td>-0.012593</td>\n",
       "      <td>-0.011035</td>\n",
       "      <td>0.002541</td>\n",
       "      <td>-0.011067</td>\n",
       "      <td>-0.012985</td>\n",
       "      <td>0.092796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total eve calls</th>\n",
       "      <td>0.019260</td>\n",
       "      <td>-0.011886</td>\n",
       "      <td>-0.005864</td>\n",
       "      <td>0.015769</td>\n",
       "      <td>0.006462</td>\n",
       "      <td>0.015769</td>\n",
       "      <td>-0.011430</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.011423</td>\n",
       "      <td>-0.002093</td>\n",
       "      <td>0.007710</td>\n",
       "      <td>-0.002056</td>\n",
       "      <td>0.008703</td>\n",
       "      <td>0.017434</td>\n",
       "      <td>0.008674</td>\n",
       "      <td>0.002423</td>\n",
       "      <td>0.009233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total eve charge</th>\n",
       "      <td>-0.006745</td>\n",
       "      <td>0.003607</td>\n",
       "      <td>0.017578</td>\n",
       "      <td>0.007029</td>\n",
       "      <td>-0.021449</td>\n",
       "      <td>0.007036</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.011423</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.012592</td>\n",
       "      <td>0.007596</td>\n",
       "      <td>-0.012601</td>\n",
       "      <td>-0.011043</td>\n",
       "      <td>0.002541</td>\n",
       "      <td>-0.011074</td>\n",
       "      <td>-0.012987</td>\n",
       "      <td>0.092786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total night minutes</th>\n",
       "      <td>-0.008955</td>\n",
       "      <td>-0.005825</td>\n",
       "      <td>0.007681</td>\n",
       "      <td>0.004323</td>\n",
       "      <td>0.022938</td>\n",
       "      <td>0.004324</td>\n",
       "      <td>-0.012584</td>\n",
       "      <td>-0.002093</td>\n",
       "      <td>-0.012592</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.011204</td>\n",
       "      <td>0.999999</td>\n",
       "      <td>-0.015207</td>\n",
       "      <td>-0.012353</td>\n",
       "      <td>-0.015180</td>\n",
       "      <td>-0.009288</td>\n",
       "      <td>0.035493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total night calls</th>\n",
       "      <td>-0.013176</td>\n",
       "      <td>0.016522</td>\n",
       "      <td>0.007123</td>\n",
       "      <td>0.022972</td>\n",
       "      <td>-0.019557</td>\n",
       "      <td>0.022972</td>\n",
       "      <td>0.007586</td>\n",
       "      <td>0.007710</td>\n",
       "      <td>0.007596</td>\n",
       "      <td>0.011204</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.011188</td>\n",
       "      <td>-0.013605</td>\n",
       "      <td>0.000305</td>\n",
       "      <td>-0.013630</td>\n",
       "      <td>-0.012802</td>\n",
       "      <td>0.006141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total night charge</th>\n",
       "      <td>-0.008960</td>\n",
       "      <td>-0.005845</td>\n",
       "      <td>0.007663</td>\n",
       "      <td>0.004300</td>\n",
       "      <td>0.022927</td>\n",
       "      <td>0.004301</td>\n",
       "      <td>-0.012593</td>\n",
       "      <td>-0.002056</td>\n",
       "      <td>-0.012601</td>\n",
       "      <td>0.999999</td>\n",
       "      <td>0.011188</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.015214</td>\n",
       "      <td>-0.012329</td>\n",
       "      <td>-0.015186</td>\n",
       "      <td>-0.009277</td>\n",
       "      <td>0.035496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total intl minutes</th>\n",
       "      <td>0.009514</td>\n",
       "      <td>-0.018288</td>\n",
       "      <td>0.002856</td>\n",
       "      <td>-0.010155</td>\n",
       "      <td>0.021565</td>\n",
       "      <td>-0.010157</td>\n",
       "      <td>-0.011035</td>\n",
       "      <td>0.008703</td>\n",
       "      <td>-0.011043</td>\n",
       "      <td>-0.015207</td>\n",
       "      <td>-0.013605</td>\n",
       "      <td>-0.015214</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.032304</td>\n",
       "      <td>0.999993</td>\n",
       "      <td>-0.009640</td>\n",
       "      <td>0.068239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total intl calls</th>\n",
       "      <td>0.020661</td>\n",
       "      <td>-0.024179</td>\n",
       "      <td>0.013957</td>\n",
       "      <td>0.008033</td>\n",
       "      <td>0.004574</td>\n",
       "      <td>0.008032</td>\n",
       "      <td>0.002541</td>\n",
       "      <td>0.017434</td>\n",
       "      <td>0.002541</td>\n",
       "      <td>-0.012353</td>\n",
       "      <td>0.000305</td>\n",
       "      <td>-0.012329</td>\n",
       "      <td>0.032304</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.032372</td>\n",
       "      <td>-0.017561</td>\n",
       "      <td>-0.052844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total intl charge</th>\n",
       "      <td>0.009546</td>\n",
       "      <td>-0.018395</td>\n",
       "      <td>0.002884</td>\n",
       "      <td>-0.010092</td>\n",
       "      <td>0.021666</td>\n",
       "      <td>-0.010094</td>\n",
       "      <td>-0.011067</td>\n",
       "      <td>0.008674</td>\n",
       "      <td>-0.011074</td>\n",
       "      <td>-0.015180</td>\n",
       "      <td>-0.013630</td>\n",
       "      <td>-0.015186</td>\n",
       "      <td>0.999993</td>\n",
       "      <td>0.032372</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.009675</td>\n",
       "      <td>0.068259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Customer service calls</th>\n",
       "      <td>-0.003796</td>\n",
       "      <td>0.027572</td>\n",
       "      <td>-0.013263</td>\n",
       "      <td>-0.013423</td>\n",
       "      <td>-0.018942</td>\n",
       "      <td>-0.013427</td>\n",
       "      <td>-0.012985</td>\n",
       "      <td>0.002423</td>\n",
       "      <td>-0.012987</td>\n",
       "      <td>-0.009288</td>\n",
       "      <td>-0.012802</td>\n",
       "      <td>-0.009277</td>\n",
       "      <td>-0.009640</td>\n",
       "      <td>-0.017561</td>\n",
       "      <td>-0.009675</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.208750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Churn</th>\n",
       "      <td>0.016541</td>\n",
       "      <td>0.006174</td>\n",
       "      <td>-0.089728</td>\n",
       "      <td>0.205151</td>\n",
       "      <td>0.018459</td>\n",
       "      <td>0.205151</td>\n",
       "      <td>0.092796</td>\n",
       "      <td>0.009233</td>\n",
       "      <td>0.092786</td>\n",
       "      <td>0.035493</td>\n",
       "      <td>0.006141</td>\n",
       "      <td>0.035496</td>\n",
       "      <td>0.068239</td>\n",
       "      <td>-0.052844</td>\n",
       "      <td>0.068259</td>\n",
       "      <td>0.208750</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Account length  Area code  Number vmail messages  \\\n",
       "Account length                1.000000  -0.012463              -0.004628   \n",
       "Area code                    -0.012463   1.000000              -0.001994   \n",
       "Number vmail messages        -0.004628  -0.001994               1.000000   \n",
       "Total day minutes             0.006216  -0.008264               0.000778   \n",
       "Total day calls               0.038470  -0.009646              -0.009548   \n",
       "Total day charge              0.006214  -0.008264               0.000776   \n",
       "Total eve minutes            -0.006757   0.003580               0.017562   \n",
       "Total eve calls               0.019260  -0.011886              -0.005864   \n",
       "Total eve charge             -0.006745   0.003607               0.017578   \n",
       "Total night minutes          -0.008955  -0.005825               0.007681   \n",
       "Total night calls            -0.013176   0.016522               0.007123   \n",
       "Total night charge           -0.008960  -0.005845               0.007663   \n",
       "Total intl minutes            0.009514  -0.018288               0.002856   \n",
       "Total intl calls              0.020661  -0.024179               0.013957   \n",
       "Total intl charge             0.009546  -0.018395               0.002884   \n",
       "Customer service calls       -0.003796   0.027572              -0.013263   \n",
       "Churn                         0.016541   0.006174              -0.089728   \n",
       "\n",
       "                        Total day minutes  Total day calls  Total day charge  \\\n",
       "Account length                   0.006216         0.038470          0.006214   \n",
       "Area code                       -0.008264        -0.009646         -0.008264   \n",
       "Number vmail messages            0.000778        -0.009548          0.000776   \n",
       "Total day minutes                1.000000         0.006750          1.000000   \n",
       "Total day calls                  0.006750         1.000000          0.006753   \n",
       "Total day charge                 1.000000         0.006753          1.000000   \n",
       "Total eve minutes                0.007043        -0.021451          0.007050   \n",
       "Total eve calls                  0.015769         0.006462          0.015769   \n",
       "Total eve charge                 0.007029        -0.021449          0.007036   \n",
       "Total night minutes              0.004323         0.022938          0.004324   \n",
       "Total night calls                0.022972        -0.019557          0.022972   \n",
       "Total night charge               0.004300         0.022927          0.004301   \n",
       "Total intl minutes              -0.010155         0.021565         -0.010157   \n",
       "Total intl calls                 0.008033         0.004574          0.008032   \n",
       "Total intl charge               -0.010092         0.021666         -0.010094   \n",
       "Customer service calls          -0.013423        -0.018942         -0.013427   \n",
       "Churn                            0.205151         0.018459          0.205151   \n",
       "\n",
       "                        Total eve minutes  Total eve calls  Total eve charge  \\\n",
       "Account length                  -0.006757         0.019260         -0.006745   \n",
       "Area code                        0.003580        -0.011886          0.003607   \n",
       "Number vmail messages            0.017562        -0.005864          0.017578   \n",
       "Total day minutes                0.007043         0.015769          0.007029   \n",
       "Total day calls                 -0.021451         0.006462         -0.021449   \n",
       "Total day charge                 0.007050         0.015769          0.007036   \n",
       "Total eve minutes                1.000000        -0.011430          1.000000   \n",
       "Total eve calls                 -0.011430         1.000000         -0.011423   \n",
       "Total eve charge                 1.000000        -0.011423          1.000000   \n",
       "Total night minutes             -0.012584        -0.002093         -0.012592   \n",
       "Total night calls                0.007586         0.007710          0.007596   \n",
       "Total night charge              -0.012593        -0.002056         -0.012601   \n",
       "Total intl minutes              -0.011035         0.008703         -0.011043   \n",
       "Total intl calls                 0.002541         0.017434          0.002541   \n",
       "Total intl charge               -0.011067         0.008674         -0.011074   \n",
       "Customer service calls          -0.012985         0.002423         -0.012987   \n",
       "Churn                            0.092796         0.009233          0.092786   \n",
       "\n",
       "                        Total night minutes  Total night calls  \\\n",
       "Account length                    -0.008955          -0.013176   \n",
       "Area code                         -0.005825           0.016522   \n",
       "Number vmail messages              0.007681           0.007123   \n",
       "Total day minutes                  0.004323           0.022972   \n",
       "Total day calls                    0.022938          -0.019557   \n",
       "Total day charge                   0.004324           0.022972   \n",
       "Total eve minutes                 -0.012584           0.007586   \n",
       "Total eve calls                   -0.002093           0.007710   \n",
       "Total eve charge                  -0.012592           0.007596   \n",
       "Total night minutes                1.000000           0.011204   \n",
       "Total night calls                  0.011204           1.000000   \n",
       "Total night charge                 0.999999           0.011188   \n",
       "Total intl minutes                -0.015207          -0.013605   \n",
       "Total intl calls                  -0.012353           0.000305   \n",
       "Total intl charge                 -0.015180          -0.013630   \n",
       "Customer service calls            -0.009288          -0.012802   \n",
       "Churn                              0.035493           0.006141   \n",
       "\n",
       "                        Total night charge  Total intl minutes  \\\n",
       "Account length                   -0.008960            0.009514   \n",
       "Area code                        -0.005845           -0.018288   \n",
       "Number vmail messages             0.007663            0.002856   \n",
       "Total day minutes                 0.004300           -0.010155   \n",
       "Total day calls                   0.022927            0.021565   \n",
       "Total day charge                  0.004301           -0.010157   \n",
       "Total eve minutes                -0.012593           -0.011035   \n",
       "Total eve calls                  -0.002056            0.008703   \n",
       "Total eve charge                 -0.012601           -0.011043   \n",
       "Total night minutes               0.999999           -0.015207   \n",
       "Total night calls                 0.011188           -0.013605   \n",
       "Total night charge                1.000000           -0.015214   \n",
       "Total intl minutes               -0.015214            1.000000   \n",
       "Total intl calls                 -0.012329            0.032304   \n",
       "Total intl charge                -0.015186            0.999993   \n",
       "Customer service calls           -0.009277           -0.009640   \n",
       "Churn                             0.035496            0.068239   \n",
       "\n",
       "                        Total intl calls  Total intl charge  \\\n",
       "Account length                  0.020661           0.009546   \n",
       "Area code                      -0.024179          -0.018395   \n",
       "Number vmail messages           0.013957           0.002884   \n",
       "Total day minutes               0.008033          -0.010092   \n",
       "Total day calls                 0.004574           0.021666   \n",
       "Total day charge                0.008032          -0.010094   \n",
       "Total eve minutes               0.002541          -0.011067   \n",
       "Total eve calls                 0.017434           0.008674   \n",
       "Total eve charge                0.002541          -0.011074   \n",
       "Total night minutes            -0.012353          -0.015180   \n",
       "Total night calls               0.000305          -0.013630   \n",
       "Total night charge             -0.012329          -0.015186   \n",
       "Total intl minutes              0.032304           0.999993   \n",
       "Total intl calls                1.000000           0.032372   \n",
       "Total intl charge               0.032372           1.000000   \n",
       "Customer service calls         -0.017561          -0.009675   \n",
       "Churn                          -0.052844           0.068259   \n",
       "\n",
       "                        Customer service calls     Churn  \n",
       "Account length                       -0.003796  0.016541  \n",
       "Area code                             0.027572  0.006174  \n",
       "Number vmail messages                -0.013263 -0.089728  \n",
       "Total day minutes                    -0.013423  0.205151  \n",
       "Total day calls                      -0.018942  0.018459  \n",
       "Total day charge                     -0.013427  0.205151  \n",
       "Total eve minutes                    -0.012985  0.092796  \n",
       "Total eve calls                       0.002423  0.009233  \n",
       "Total eve charge                     -0.012987  0.092786  \n",
       "Total night minutes                  -0.009288  0.035493  \n",
       "Total night calls                    -0.012802  0.006141  \n",
       "Total night charge                   -0.009277  0.035496  \n",
       "Total intl minutes                   -0.009640  0.068239  \n",
       "Total intl calls                     -0.017561 -0.052844  \n",
       "Total intl charge                    -0.009675  0.068259  \n",
       "Customer service calls                1.000000  0.208750  \n",
       "Churn                                 0.208750  1.000000  "
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получилась очень  милая корреляционная матрица как будто с цветочками. Жаль только эти цветочки говорят о том, что у нас есть проблема мультиколлинеарности, потому что, очевидно, переменные количество звонков и стоимость звонков в определенный промежуток дня коррелируют друг с другом. Удалим по одному из каждой пары. Также смотря на корреляцию между таргетом и объясняющими переменными, можем заметить, что таргет совсем не коррелирует с area code, total night calls, total eve calls (они все меньше 0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Account length', 'International plan', 'Voice mail plan',\n",
       "       'Number vmail messages', 'Total day minutes', 'Total day calls',\n",
       "       'Total day charge', 'Total eve minutes', 'Total eve calls',\n",
       "       'Total eve charge', 'Total night minutes', 'Total night calls',\n",
       "       'Total night charge', 'Total intl minutes', 'Total intl calls',\n",
       "       'Total intl charge', 'Customer service calls', '408', '415', '510',\n",
       "       'AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'HI',\n",
       "       'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN',\n",
       "       'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH',\n",
       "       'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA',\n",
       "       'WI', 'WV', 'WY'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = X.drop(['408',\n",
    "            '415',\n",
    "            '510',\n",
    "            'Total night calls',\n",
    "            'Total eve calls',\n",
    "            'Total day minutes',\n",
    "            'Total eve minutes',\n",
    "            'Total night minutes',\n",
    "            'Total intl minutes'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# LogReg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train_1, X_test_1, y_train, y_test = train_test_split(X, y, test_size=0.3) \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "sc = StandardScaler()\n",
    "X_train = sc.fit_transform(X_train_1)\n",
    "X_test = sc.transform(X_test_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>2006</th>\n",
       "      <th>2007</th>\n",
       "      <th>2008</th>\n",
       "      <th>2009</th>\n",
       "      <th>2010</th>\n",
       "      <th>2011</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>2014</th>\n",
       "      <th>2015</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.977294</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>-0.626766</td>\n",
       "      <td>-0.599733</td>\n",
       "      <td>-0.019568</td>\n",
       "      <td>-0.371341</td>\n",
       "      <td>-0.573950</td>\n",
       "      <td>1.256315</td>\n",
       "      <td>-0.212584</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.019414</td>\n",
       "      <td>0.024846</td>\n",
       "      <td>0.020842</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.623868</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>-0.626766</td>\n",
       "      <td>-0.599733</td>\n",
       "      <td>2.085170</td>\n",
       "      <td>-1.639237</td>\n",
       "      <td>0.199567</td>\n",
       "      <td>-0.099142</td>\n",
       "      <td>-1.022971</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.019414</td>\n",
       "      <td>0.024846</td>\n",
       "      <td>0.020842</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.926804</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>-0.626766</td>\n",
       "      <td>-0.599733</td>\n",
       "      <td>2.335734</td>\n",
       "      <td>0.255617</td>\n",
       "      <td>-0.550860</td>\n",
       "      <td>1.366694</td>\n",
       "      <td>-1.022971</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.019414</td>\n",
       "      <td>0.024846</td>\n",
       "      <td>0.020842</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.320931</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>-0.626766</td>\n",
       "      <td>-0.599733</td>\n",
       "      <td>1.784493</td>\n",
       "      <td>2.218221</td>\n",
       "      <td>1.102389</td>\n",
       "      <td>-1.330974</td>\n",
       "      <td>-1.022971</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.019414</td>\n",
       "      <td>0.024846</td>\n",
       "      <td>0.020842</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.007250</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>-0.626766</td>\n",
       "      <td>-0.599733</td>\n",
       "      <td>0.732124</td>\n",
       "      <td>0.067422</td>\n",
       "      <td>1.067754</td>\n",
       "      <td>1.494734</td>\n",
       "      <td>2.623774</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.019414</td>\n",
       "      <td>0.024846</td>\n",
       "      <td>0.020842</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2328</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.183963</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>-0.626766</td>\n",
       "      <td>-0.599733</td>\n",
       "      <td>1.082914</td>\n",
       "      <td>-0.760635</td>\n",
       "      <td>-0.571641</td>\n",
       "      <td>0.629361</td>\n",
       "      <td>-0.617777</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.019414</td>\n",
       "      <td>0.024846</td>\n",
       "      <td>0.020842</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2329</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.335431</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>1.595491</td>\n",
       "      <td>1.656887</td>\n",
       "      <td>-0.119794</td>\n",
       "      <td>0.779337</td>\n",
       "      <td>-0.412320</td>\n",
       "      <td>-0.964515</td>\n",
       "      <td>-0.212584</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.019414</td>\n",
       "      <td>0.024846</td>\n",
       "      <td>0.020842</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2330</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.371421</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>-0.626766</td>\n",
       "      <td>-0.599733</td>\n",
       "      <td>-0.370358</td>\n",
       "      <td>0.687928</td>\n",
       "      <td>0.259602</td>\n",
       "      <td>0.571964</td>\n",
       "      <td>1.002998</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.019414</td>\n",
       "      <td>0.024846</td>\n",
       "      <td>0.020842</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2331</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.663612</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>-0.626766</td>\n",
       "      <td>-0.599733</td>\n",
       "      <td>-0.470584</td>\n",
       "      <td>-0.612230</td>\n",
       "      <td>0.040246</td>\n",
       "      <td>0.068635</td>\n",
       "      <td>-0.617777</td>\n",
       "      <td>...</td>\n",
       "      <td>54.547619</td>\n",
       "      <td>-1.059007</td>\n",
       "      <td>-1.355280</td>\n",
       "      <td>-1.136875</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2332</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.052071</td>\n",
       "      <td>-0.323481</td>\n",
       "      <td>1.595491</td>\n",
       "      <td>1.147328</td>\n",
       "      <td>0.180883</td>\n",
       "      <td>-0.952056</td>\n",
       "      <td>-1.139657</td>\n",
       "      <td>-0.178615</td>\n",
       "      <td>-0.617777</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>0.019414</td>\n",
       "      <td>0.024846</td>\n",
       "      <td>0.020842</td>\n",
       "      <td>0.02056</td>\n",
       "      <td>0.026312</td>\n",
       "      <td>0.022072</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.028247</td>\n",
       "      <td>0.023695</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2333 rows × 2016 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      0         1         2         3         4         5         6     \\\n",
       "0      1.0 -0.977294 -0.323481 -0.626766 -0.599733 -0.019568 -0.371341   \n",
       "1      1.0 -0.623868 -0.323481 -0.626766 -0.599733  2.085170 -1.639237   \n",
       "2      1.0 -0.926804 -0.323481 -0.626766 -0.599733  2.335734  0.255617   \n",
       "3      1.0 -0.320931 -0.323481 -0.626766 -0.599733  1.784493  2.218221   \n",
       "4      1.0  0.007250 -0.323481 -0.626766 -0.599733  0.732124  0.067422   \n",
       "...    ...       ...       ...       ...       ...       ...       ...   \n",
       "2328   1.0  0.183963 -0.323481 -0.626766 -0.599733  1.082914 -0.760635   \n",
       "2329   1.0  0.335431 -0.323481  1.595491  1.656887 -0.119794  0.779337   \n",
       "2330   1.0 -0.371421 -0.323481 -0.626766 -0.599733 -0.370358  0.687928   \n",
       "2331   1.0  0.663612 -0.323481 -0.626766 -0.599733 -0.470584 -0.612230   \n",
       "2332   1.0  2.052071 -0.323481  1.595491  1.147328  0.180883 -0.952056   \n",
       "\n",
       "          7         8         9     ...       2006      2007      2008  \\\n",
       "0    -0.573950  1.256315 -0.212584  ...   0.018333  0.019414  0.024846   \n",
       "1     0.199567 -0.099142 -1.022971  ...   0.018333  0.019414  0.024846   \n",
       "2    -0.550860  1.366694 -1.022971  ...   0.018333  0.019414  0.024846   \n",
       "3     1.102389 -1.330974 -1.022971  ...   0.018333  0.019414  0.024846   \n",
       "4     1.067754  1.494734  2.623774  ...   0.018333  0.019414  0.024846   \n",
       "...        ...       ...       ...  ...        ...       ...       ...   \n",
       "2328 -0.571641  0.629361 -0.617777  ...   0.018333  0.019414  0.024846   \n",
       "2329 -0.412320 -0.964515 -0.212584  ...   0.018333  0.019414  0.024846   \n",
       "2330  0.259602  0.571964  1.002998  ...   0.018333  0.019414  0.024846   \n",
       "2331  0.040246  0.068635 -0.617777  ...  54.547619 -1.059007 -1.355280   \n",
       "2332 -1.139657 -0.178615 -0.617777  ...   0.018333  0.019414  0.024846   \n",
       "\n",
       "          2009     2010      2011      2012      2013      2014      2015  \n",
       "0     0.020842  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "1     0.020842  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "2     0.020842  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "3     0.020842  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "4     0.020842  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "...        ...      ...       ...       ...       ...       ...       ...  \n",
       "2328  0.020842  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "2329  0.020842  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "2330  0.020842  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "2331 -1.136875  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "2332  0.020842  0.02056  0.026312  0.022072  0.033673  0.028247  0.023695  \n",
       "\n",
       "[2333 rows x 2016 columns]"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poly = PolynomialFeatures(2)\n",
    "\n",
    "X_train_poly = poly.fit_transform(X_train)\n",
    "X_test_poly = poly.transform(X_test)\n",
    "\n",
    "\n",
    "pd.DataFrame(X_train_poly)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best score: 0.4504218950468176\n",
      "best params: {'C': 0.1, 'solver': 'liblinear'}\n"
     ]
    }
   ],
   "source": [
    "params = {'C': np.arange(0.1,1.1,0.1),\n",
    "         'solver': ['lbfgs', 'liblinear']}\n",
    "grid = GridSearchCV(LogisticRegression(multi_class='auto'), \n",
    "                    params, \n",
    "                    scoring = 'f1')\n",
    "\n",
    "grid.fit(X_train_poly, y_train)\n",
    "\n",
    "print('best score:', grid.best_score_)\n",
    "print('best params:', grid.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 train:  0.9628482972136222\n",
      "F1 test:  0.5036496350364963\n",
      "\n",
      "roc_auc_score train:  0.9687895186384612\n",
      "roc_auc_score test:  0.6957236842105263\n",
      "\n",
      "accuracy_score train:  0.9897128161165881\n",
      "accuracy_score test:  0.864\n"
     ]
    }
   ],
   "source": [
    "model = LogisticRegression(solver='liblinear', multi_class='auto', C = 0.5)\n",
    "\n",
    "model.fit(X_train_poly, y_train)\n",
    "\n",
    "pred_train = model.predict(X_train_poly)\n",
    "pred_test = model.predict(X_test_poly)\n",
    "print('F1 train: ', f1_score(y_train, pred_train))\n",
    "print('F1 test: ', f1_score(y_test, pred_test))\n",
    "print()\n",
    "print('roc_auc_score train: ', roc_auc_score(y_train, pred_train))\n",
    "print('roc_auc_score test: ', roc_auc_score(y_test, pred_test))\n",
    "print()\n",
    "print('accuracy_score train: ', accuracy_score(y_train, pred_train))\n",
    "print('accuracy_score test: ', accuracy_score(y_test, pred_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best score: 0.5386871750630421\n",
      "best params: {'C': 0.01}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "params = {'C': [0.001, 0.01, 0.1, 1]}\n",
    "grid = GridSearchCV(LinearSVC(),\n",
    "                    params,\n",
    "                    scoring = 'f1')\n",
    "\n",
    "grid.fit(X_train_poly, y_train)\n",
    "\n",
    "print('best score:', grid.best_score_)\n",
    "print('best params:', grid.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 train:  0.9372128637059725\n",
      "F1 test:  0.4386617100371747\n",
      "\n",
      "roc_auc_score train:  0.9461127706257105\n",
      "roc_auc_score test:  0.6690568779464824\n",
      "\n",
      "accuracy_score train:  0.982426060865838\n",
      "accuracy_score test:  0.849\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "\n",
    "SVM_model = svm.LinearSVC(C = 0.01)\n",
    "\n",
    "SVM_model.fit(X_train_poly, y_train)\n",
    "pred_train_svm = SVM_model.predict(X_train_poly)\n",
    "pred_test_svm = SVM_model.predict(X_test_poly)\n",
    "\n",
    "print('F1 train: ', f1_score(y_train, pred_train_svm))\n",
    "print('F1 test: ', f1_score(y_test, pred_test_svm))\n",
    "print()\n",
    "print('roc_auc_score train: ', roc_auc_score(y_train, pred_train_svm))\n",
    "print('roc_auc_score test: ', roc_auc_score(y_test, pred_test_svm))\n",
    "print()\n",
    "print('accuracy_score train: ', accuracy_score(y_train, pred_train_svm))\n",
    "print('accuracy_score test: ', accuracy_score(y_test, pred_test_svm))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "После анализа корреляций качество осталось примерно на том же уровне, но переобучение стало чуть чуть менее выраженным, хотя все еще очень сильным."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**E. (1 балл)** Сделайте мини-отчет о проведенной работе. Для этого ответьте на вопросы:\n",
    "a) какой классификатор дал наилучший результат? чему равны значения метрик accuracy, f1-score и ROC-AUC?\n",
    "(Вы можете изначально разбить данные на train и test и сравнивать значения метрик на этих выборках; или же можно оценивать качество алгоритмов по кросс-валидации).\n",
    "\n",
    "b) какие новые признаки вы добавили и какие признаки удалили?\n",
    "\n",
    "c) удалось ли добиться того, что алгоритм не переобучился и не недообучился?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В результате самый лучший результат дал SVMс полиномиальными признаками: \n",
    "\n",
    "F1 train:  0.9093799682034976\n",
    "F1 test:  0.5217391304347825\n",
    "\n",
    "roc_auc_score train:  0.917877524885376\n",
    "roc_auc_score test:  0.7072672330517921\n",
    "\n",
    "accuracy_score train:  0.9755679382768967\n",
    "accuracy_score test:  0.879\n",
    "\n",
    "Добавила только полиномиальные признаки, удаление коррелирующих признаков понизило качество. \n",
    "\n",
    "Не получилось добиться того, чтобы алгоритм не переобучался."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "P_eZeUI8VtSV"
   },
   "source": [
    "## Часть 2. Оценка качества моделей классификации (5 баллов)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TtkPBvYvVtSV"
   },
   "source": [
    "**Задание 0. (0.25 балла)** Закончите определения, начинающиеся так:\n",
    "\n",
    "    * accuracy - это доля правильных ответов среди всех объектов.\n",
    "    \n",
    "    * точность (precision) - это доля правильных положительных ответов среди всех положительных ответов.\n",
    "    \n",
    "    * полнота (recall) - это доля правильно положительных ответов среди всех положительных объектов.\n",
    "    \n",
    "    * TPR - это доля правильных ответов положительного класса среди всех положительных объектов.\n",
    "    \n",
    "    \n",
    "Продолжите определения прямо в этой ячейке."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "z-UH40oKVtSW"
   },
   "source": [
    "_______________________________________________________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "fvfcuu_lVtSX"
   },
   "source": [
    "В этой части вы будете работать с данными в задаче скоринга. За работу с этими данными можно получить **5 баллов.**\n",
    "\n",
    "* Колонки 0, 1, ..., 13 - анонимизированные характеристики клиентов (некоторые числовые, некоторые категориальные).\n",
    "* Target - целевая переменная: 1 - выдать кредит, 0 - не выдать кредит.\n",
    "\n",
    "На этих данных было обучено три различных алгоритма классификации и получены предсказания:\n",
    "* pred1_probs - предсказанные вероятности положительного класса, полученные алгоритмом 1.\n",
    "* pred1_classes - предсказанные алгоритмом 1 классы\n",
    "* pred2_probs, pred2_classes, pred3_probs, pred3_classes - аналогичные величины для алгоритмов 2 и 3\n",
    "\n",
    "Наша задача - оценить качество каждого из трех алгоритмов и разобраться, какой из алгоритмов лучше всего работает в данной задаче."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 334
    },
    "executionInfo": {
     "elapsed": 239,
     "status": "error",
     "timestamp": 1697441211302,
     "user": {
      "displayName": "Sergey Korpachev",
      "userId": "09181340988160569540"
     },
     "user_tz": -180
    },
    "id": "kAbaBqTDVtSX",
    "outputId": "c1d714a3-1fcf-4aea-8f50-78eff9dc1a6c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>target</th>\n",
       "      <th>pred1_probs</th>\n",
       "      <th>pred1_classes</th>\n",
       "      <th>pred2_probs</th>\n",
       "      <th>pred2_classes</th>\n",
       "      <th>pred3_probs</th>\n",
       "      <th>pred3_classes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>22.08</td>\n",
       "      <td>11.46</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1.585</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>100</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>0.506772</td>\n",
       "      <td>1</td>\n",
       "      <td>0.610853</td>\n",
       "      <td>1</td>\n",
       "      <td>0.375494</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>22.67</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0.165</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>160</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.358519</td>\n",
       "      <td>0</td>\n",
       "      <td>0.185941</td>\n",
       "      <td>0</td>\n",
       "      <td>0.200975</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>29.58</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1.250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>280</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.358753</td>\n",
       "      <td>0</td>\n",
       "      <td>0.523009</td>\n",
       "      <td>1</td>\n",
       "      <td>0.160465</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>21.67</td>\n",
       "      <td>11.50</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.408729</td>\n",
       "      <td>0</td>\n",
       "      <td>0.185941</td>\n",
       "      <td>0</td>\n",
       "      <td>0.357771</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>20.17</td>\n",
       "      <td>8.17</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>1.960</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>60</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>0.480904</td>\n",
       "      <td>0</td>\n",
       "      <td>0.526646</td>\n",
       "      <td>1</td>\n",
       "      <td>0.260169</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   0      1      2  3  4  5      6  7  8   9  ...  11   12    13  target  \\\n",
       "0  1  22.08  11.46  2  4  4  1.585  0  0   0  ...   2  100  1213       0   \n",
       "1  0  22.67   7.00  2  8  4  0.165  0  0   0  ...   2  160     1       0   \n",
       "2  0  29.58   1.75  1  4  4  1.250  0  0   0  ...   2  280     1       0   \n",
       "3  0  21.67  11.50  1  5  3  0.000  1  1  11  ...   2    0     1       1   \n",
       "4  1  20.17   8.17  2  6  4  1.960  1  1  14  ...   2   60   159       1   \n",
       "\n",
       "   pred1_probs  pred1_classes  pred2_probs  pred2_classes  pred3_probs  \\\n",
       "0     0.506772              1     0.610853              1     0.375494   \n",
       "1     0.358519              0     0.185941              0     0.200975   \n",
       "2     0.358753              0     0.523009              1     0.160465   \n",
       "3     0.408729              0     0.185941              0     0.357771   \n",
       "4     0.480904              0     0.526646              1     0.260169   \n",
       "\n",
       "   pred3_classes  \n",
       "0              0  \n",
       "1              0  \n",
       "2              0  \n",
       "3              0  \n",
       "4              0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"credit_scoring_example1.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Z6d6KvKEVtSY"
   },
   "outputs": [],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oS7igrxpVtSZ"
   },
   "source": [
    "**Задание 1. (0.25 балла)** Проверьте target на сбалансированность по классам, сделайте вывод."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "id": "gploUTDyVtSZ"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    382\n",
      "1    307\n",
      "Name: target, dtype: int64\n",
      "0    0.554427\n",
      "1    0.445573\n",
      "Name: target, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(df['target'].value_counts())\n",
    "print(df['target'].value_counts(normalize=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Классы достаточно сбалансированны, есть небольшой перевес в пользу 0 класса."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UT3G1t02VtSa"
   },
   "source": [
    "**Задание 2. (0.25 балла)** Вычислите accuracy - долю правильных ответов каждого из алгоритмов. Какой алгоритм имеет наибольшую accuracy?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "id": "pHOellQYVtSa",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy_score for pred1_classes 0.6618287373004355\n",
      "accuracy_score for pred2_classes 0.6719883889695211\n",
      "accuracy_score for pred3_classes 0.6400580551523948\n"
     ]
    }
   ],
   "source": [
    "for i in ['pred1_classes', 'pred2_classes', 'pred3_classes']:\n",
    "    print('accuracy_score for', i, accuracy_score(df['target'], df[i]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Наибольшая accuracy у алгоритма 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NTa8PUETVtSa"
   },
   "source": [
    "**Задание 3. (0.25 балла)** Теперь вычислите точность и полноту каждого из алгоритмов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "id": "yBpgCLRxVtSb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "precision_score for pred1_classes 0.6907216494845361\n",
      "precision_score for pred2_classes 0.6103542234332425\n",
      "precision_score for pred3_classes 0.6903225806451613\n",
      "\n",
      "recall_score for pred1_classes 0.4364820846905538\n",
      "recall_score for pred2_classes 0.7296416938110749\n",
      "recall_score for pred3_classes 0.3485342019543974\n"
     ]
    }
   ],
   "source": [
    "for i in ['pred1_classes', 'pred2_classes', 'pred3_classes']:\n",
    "    print('precision_score for', i, precision_score(df['target'], df[i]))\n",
    "    \n",
    "print() \n",
    "\n",
    "for i in ['pred1_classes', 'pred2_classes', 'pred3_classes']:\n",
    "    print('recall_score for', i, recall_score(df['target'], df[i]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "X5SzC79YVtSb"
   },
   "source": [
    "Самым полезным инструментом в практических задачах является ***матрица ошибок***. Смотря на неё и регулируя порог, определяющий классы, мы можем достичь оптимального решения нашей задачи.\n",
    "\n",
    "**Задание 4. (0.5 балла)** Используя функцию plot_confusion_matrix для визуализации матрицы ошибок, нарисуйте матрицы ошибок всех трех алгоритмов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "id": "Nm_5fszXVtSb"
   },
   "outputs": [],
   "source": [
    "import itertools\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "id": "ZiWH9O0OVtSc"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAi8AAAHpCAYAAABKjdxwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy88F64QAAAACXBIWXMAAA9hAAAPYQGoP6dpAABUpklEQVR4nO3deXhM9x4G8HeyTfYQ2QlCLSFB7LQliCXWVG1Fawm1R4paL6KWoLUvoaqSWooiGktdS9AqQSKWoGpJCDKiRCL7du4fbk6NJEwyk+WY99PnPI8553fOfCd3brx+yzkyQRAEEBEREUmETlkXQERERFQUDC9EREQkKQwvREREJCkML0RERCQpDC9EREQkKQwvREREJCkML0RERCQpDC9EREQkKQwvREREJCkML0Ql4OrVqxg2bBicnJxgaGgIU1NTNG7cGEuXLsXz589L9L0jIyPRtm1bWFhYQCaTYeXKlRp/D5lMBj8/P41ftzxZtGgR9u/fX6RzAgMDIZPJEBMTUyI1EdErMj4egEizNm3ahLFjx6JOnToYO3Ys6tWrh6ysLISHh2PTpk1o2LAhgoODS+z93dzckJKSglWrVqFixYqoXr067OzsNPoeYWFhqFKlCqpUqaLR65Ynpqam6NOnDwIDA1U+5+nTp7h79y7c3Nwgl8tLrjgiLcfwQqRB586dw8cff4yOHTti//79+f4Cy8zMxJEjR9CzZ88Sq0FfXx8jR47E+vXrS+w9tEFRwktaWhoMDQ0hk8lKvjAi4rARkSYtWrQIMpkM33//fYH/8jYwMFAKLrm5uVi6dCnq1q0LuVwOGxsbfPHFF3j48KHSee7u7nBxccHFixfx8ccfw9jYGDVq1MDixYuRm5sL4N8hi+zsbAQEBEAmk4l/mfr5+RX4F2tBwxyhoaFwd3dHpUqVYGRkhKpVq+LTTz9Famqq2KagYaOoqCj06tULFStWhKGhIRo1aoSgoCClNqdOnYJMJsPPP/+MWbNmwcHBAebm5vDw8MCtW7fe+fPN+xxXr15F3759YWFhAUtLS0yaNAnZ2dm4desWunTpAjMzM1SvXh1Lly5VOj89PR2TJ09Go0aNxHNbtWqFX3/9VamdTCZDSkoKgoKCxJ+ju7u70s/s6NGjGD58OKytrWFsbIyMjIx8P8/bt2/D3Nwcffv2Vbp+aGgodHV1MXv27Hd+ZiLKj+GFSENycnIQGhqKJk2awNHRUaVzxowZg2nTpqFjx44ICQnB/PnzceTIEbRu3Rr//POPUluFQoFBgwZh8ODBCAkJgaenJ2bMmIFt27YBALp164Zz584BAPr06YNz586Jr1UVExODbt26wcDAAD/++COOHDmCxYsXw8TEBJmZmYWed+vWLbRu3RrXr1/H6tWrsW/fPtSrVw9Dhw7NFyAAYObMmbh//z5++OEHfP/997h9+zZ69OiBnJwclers168fGjZsiL1792LkyJFYsWIFvvrqK3h5eaFbt24IDg5G+/btMW3aNOzbt088LyMjA8+fP8eUKVOwf/9+/Pzzz/joo4/Qu3dv/PTTT2K7c+fOwcjICF27dhV/jm/2ZA0fPhz6+vrYunUr9uzZA319/Xx11qpVC5s2bcKePXuwevVqAK/+dxw4cCA+/vjj937eEFGJEYhIIxQKhQBAGDBggErtb968KQAQxo4dq7T//PnzAgBh5syZ4r62bdsKAITz588rta1Xr57QuXNnpX0AhHHjxintmzt3rlDQ/923bNkiABCio6MFQRCEPXv2CACEy5cvv7V2AMLcuXPF1wMGDBDkcrnw4MEDpXaenp6CsbGx8OLFC0EQBOHkyZMCAKFr165K7Xbv3i0AEM6dO/fW9837HMuWLVPa36hRIwGAsG/fPnFfVlaWYG1tLfTu3bvQ62VnZwtZWVmCt7e34ObmpnTMxMREGDJkSL5z8n5mX3zxRaHH8n6eecaMGSMYGBgI586dE9q3by/Y2NgIjx8/futnJaLCseeFqIycPHkSADB06FCl/c2bN4ezszNOnDihtN/Ozg7NmzdX2tegQQPcv39fYzU1atQIBgYG+PLLLxEUFIR79+6pdF5oaCg6dOiQr8dp6NChSE1NzdcD9OacnwYNGgCAyp+le/fuSq+dnZ0hk8ng6ekp7tPT08MHH3yQ75q//PILPvzwQ5iamkJPTw/6+vrYvHkzbt68qdJ75/n0009VbrtixQrUr18f7dq1w6lTp7Bt2zbY29sX6f2I6F8ML0QaYmVlBWNjY0RHR6vU/tmzZwBQ4F9iDg4O4vE8lSpVytdOLpcjLS2tGNUWrGbNmjh+/DhsbGwwbtw41KxZEzVr1sSqVaveet6zZ88K/Rx5x1/35mfJmx+k6mextLRUem1gYABjY2MYGhrm25+eni6+3rdvH/r164fKlStj27ZtOHfuHC5evIjhw4crtVNFUcKHXC7HwIEDkZ6ejkaNGqFjx45Fei8iUsbwQqQhurq66NChAyIiIvJNuC1I3l/gcXFx+Y49fvwYVlZWGqst7y/1jIwMpf1vzqsBgI8//hgHDhxAYmIiwsLC0KpVK/j6+mLnzp2FXr9SpUqFfg4AGv0s6ti2bRucnJywa9cueHl5oWXLlmjatGm+n4sqirKyKCoqCnPmzEGzZs1w6dIlLF++vMjvR0T/Yngh0qAZM2ZAEASMHDmywAmuWVlZOHDgAACgffv2ACBOuM1z8eJF3Lx5Ex06dNBYXdWrVwfw6uZ5r8urpSC6urpo0aIF1q1bBwC4dOlSoW07dOiA0NBQMazk+emnn2BsbIyWLVsWs3LNkslkMDAwUAoeCoUi32ojQHO9WikpKejbty+qV6+OkydPYvz48Zg+fTrOnz+v9rWJtJVeWRdA9D5p1aoVAgICMHbsWDRp0gRjxoxB/fr1kZWVhcjISHz//fdwcXFBjx49UKdOHXz55ZdYs2YNdHR04OnpiZiYGMyePRuOjo746quvNFZX165dYWlpCW9vb3zzzTfQ09NDYGAgYmNjldpt2LABoaGh6NatG6pWrYr09HT8+OOPAAAPD49Crz937lwcPHgQ7dq1w5w5c2BpaYnt27fj0KFDWLp0KSwsLDT2WdTRvXt37Nu3D2PHjkWfPn0QGxuL+fPnw97eHrdv31Zq6+rqilOnTuHAgQOwt7eHmZkZ6tSpU+T3HD16NB48eIALFy7AxMQEy5Ytw7lz5zBgwABERkaiQoUKGvp0RNqD4YVIw0aOHInmzZtjxYoVWLJkCRQKBfT19VG7dm0MHDgQ48ePF9sGBASgZs2a2Lx5M9atWwcLCwt06dIF/v7+Bc5xKS5zc3McOXIEvr6+GDx4MCpUqIARI0bA09MTI0aMENs1atQIR48exdy5c6FQKGBqagoXFxeEhISgU6dOhV6/Tp06OHv2LGbOnIlx48YhLS0Nzs7O2LJlS74JyWVp2LBhiI+Px4YNG/Djjz+iRo0amD59Oh4+fIh58+YptV21ahXGjRuHAQMGIDU1FW3btsWpU6eK9H4//PADtm3bhi1btqB+/foAXs3D2bVrFxo3boxhw4aV6N2Wid5XvMMuERERSQrnvBAREZGkMLwQERGRpDC8EBERkaQwvBAREZGkMLwQERGRpDC8EBERkaTwPi/lQG5uLh4/fgwzM7Mi3XKciIjKniAIePnyJRwcHKCjUzp9Aunp6QXexbuoDAwM8j0TTAoYXsqBx48f53saLxERSUtsbCyqVKlS4u+Tnp4OI7NKQHaq2teys7NDdHS05AIMw0s5YGZmBgAwqDcEMl2DMq6GSPMenPqurEsgKjEvk5LwgZOj+Lu8pGVmZgLZqZDXHwao83dGTiYU17cgMzOT4YWKLm+oSKZrwPBC7yVzc/OyLoGoxJX6sL+af2dI+fb6DC9ERERSJAOgTmCS8BRLhhciIiIpkum82tQ5X6KkWzkRERFpJfa8EBERSZFMpuawkXTHjRheiIiIpEiLh40YXoiIiKRIi3tepBu7iIiISCux54WIiEiS1Bw2knD/BcMLERGRFHHYiIiIiEga2PNCREQkRVxtRERERJLCYSMiIiIiaWDPCxERkRRx2IiIiIgkRYuHjRheiIiIpEiLe16kWzkRERFpJfa8EBERSZFMpmbPC4eNiIiIqDTpyF5t6pwvURw2IiIiIklhzwsREZEUafGEXYYXIiIiKdLipdLSjV1ERESkldjzQkREJEVaPGwk3cqJiIi0Wd6wkTpbEQQEBKBBgwYwNzeHubk5WrVqhd9++008LggC/Pz84ODgACMjI7i7u+P69etK18jIyMCECRNgZWUFExMT9OzZEw8fPizyR2d4ISIioneqUqUKFi9ejPDwcISHh6N9+/bo1auXGFCWLl2K5cuXY+3atbh48SLs7OzQsWNHvHz5UryGr68vgoODsXPnTpw5cwbJycno3r07cnJyilQLwwsREZEU5Q0bqbMVQY8ePdC1a1fUrl0btWvXxsKFC2FqaoqwsDAIgoCVK1di1qxZ6N27N1xcXBAUFITU1FTs2LEDAJCYmIjNmzdj2bJl8PDwgJubG7Zt24Zr167h+PHjRaqF4YWIiEiKNDRslJSUpLRlZGS8861zcnKwc+dOpKSkoFWrVoiOjoZCoUCnTp3ENnK5HG3btsXZs2cBABEREcjKylJq4+DgABcXF7GNqhheiIiIpEhDPS+Ojo6wsLAQN39//0Lf8tq1azA1NYVcLsfo0aMRHByMevXqQaFQAABsbW2V2tva2orHFAoFDAwMULFixULbqIqrjYiIiLRYbGwszM3NxddyubzQtnXq1MHly5fx4sUL7N27F0OGDMHp06fF47I3JgELgpBv35tUafMm9rwQERFJkYaGjfJWD+VtbwsvBgYG+OCDD9C0aVP4+/ujYcOGWLVqFezs7AAgXw9KfHy82BtjZ2eHzMxMJCQkFNpGVQwvREREkqTukJH6EUAQBGRkZMDJyQl2dnY4duyYeCwzMxOnT59G69atAQBNmjSBvr6+Upu4uDhERUWJbVTFYSMiIiJ6p5kzZ8LT0xOOjo54+fIldu7ciVOnTuHIkSOQyWTw9fXFokWLUKtWLdSqVQuLFi2CsbExBg4cCACwsLCAt7c3Jk+ejEqVKsHS0hJTpkyBq6srPDw8ilQLwwsREZEUlfKzjZ48eYLPP/8ccXFxsLCwQIMGDXDkyBF07NgRADB16lSkpaVh7NixSEhIQIsWLXD06FGYmZmJ11ixYgX09PTQr18/pKWloUOHDggMDISurm7RShcEQSjSGaRxSUlJsLCwgNx1JGS6BmVdDpHGJVxcW9YlEJWYpKQk2FayQGJiotLE15J8PwsLC8g7LYVM36jY1xGy0pBxdGqp1a1JnPNCREREksJhIyIiIinS4gczMrwQERFJUSnPeSlPpBu7iIiISCux54WIiEiKOGxEREREkqLFw0YML0RERFKkxT0v0q2ciIiItBJ7XoiIiKSIw0ZEREQkJTKZDDItDS8cNiIiIiJJYc8LERGRBGlzzwvDCxERkRTJ/r+pc75EcdiIiIiIJIU9L0RERBLEYSMiIiKSFIYXIiIikhRtDi+c80JERESSwp4XIiIiCdLmnheGFyIiIiniUmkiIiIiaWDPCxERkQRx2IiIiIgk5dVDpdUJL5qrpbRx2IiIiIgkhT0vREREEiSDmsNGEu56YXghIiKSIG2e88JhIyIiIpIU9rwQERFJkRbf54XhhYiISIrUHDYSJDxsxPBCREQkQerOeVFvsm/Z4pwXIiIikhT2vBAREUmQNve8MLwQERFJkRZP2OWwEREREUkKe16IiIgkiMNGREREJCnaHF44bERERESSwp4XIiIiCdLmnheGFyIiIglieCEiIiJp4VJpIiIiImlgzwsREZEEcdiIiIiIJEWbwwuHjYiIiEhSGF7ovTCy70e4sGsGnvzxLZ788S1OBU1Gpw/rAQD09HSwwKcXLu6eiX/OLsO9owvxw/zPYW9tIZ5f0dwYy6f1xZXg2Xh2djn+PvwNlk3tA3NTw7L6SETv9OjRIwz7YjAq21aCpbkxWjRphEsREeJxQRCw4Bs/OFV1QEUzI3Tq4I4b16+XXcGkUXk9L+psUsVhI3ovPHryArPX/Iq7D/4BAAzu0QK/rPgSLQcsxqP4F2jk7IjFm37D1b8foaK5Mb6d8il+WTkKHw1aCgCwt7aAvbUFZqwIxs17ClS1t8SaWQNgb22BgV9vLsuPRlSghIQEtG/7Idq2bYf9B36DjY0N7t27iwoVKohtln23FKtXLsf3mwNRq1ZtLPZfgG6eHXH1+i2YmZmVXfGkGVq82kgmCIJQ1kVou6SkJFhYWEDuOhIyXYOyLue98ejUEsxcuR9B+8/lO9akXlWc2T4VtT1nI1aRUOD5vT3c8OPCL1Cp9WTk5OSWdLnvtYSLa8u6hPfOf2ZOx7mzf+LEqT8KPC4IAmpUdcA4H19M+XoaACAjIwPVKttiwaIlGPHlqNIs972WlJQE20oWSExMhLm5eam8n4WFBRxG7oCOgXGxr5ObmYrHmwaWWt2axGEjeu/o6MjQt3MTmBgZ4PzV6ALbmJsZITc3Fy9ephV6HXMzQySlpDO4ULl06GAIGjdpioED+qKqgw1aNnXDjz9sEo/HREdDoVDAw6OTuE8ul+PjNm0Rdu5sWZRMGsZhI6L3QP0PHHAqaDIMDfSQnJaB/pM34a97inzt5AZ6mO/TC7t+C8fLlPQCr2VpYYIZIz2xec+fJV02UbFE37uHTRsD4OM7CVOnzUT4xQuY/JUP5HI5Bn3+BRSKV999G1tbpfNsbGzx4MH9siiZNIyrjSQoMDBQaWy3pLRp0wY7duxQuX18fDysra3x6NGjEqyKCvJ3zBO0GOCPtkOWYdMvZ7Dpm89Rt4adUhs9PR1sXTwMOjIZJvrvLvA6ZiaGCF49GjfvxWHh94dLo3SiIsvNzUUjt8b4ZsEiNHJzw4gvR2GY90h8vzFAqd2bf0EJgiDpv7SIgDIOL0OHDi2wG+vOnTtlWZbo4MGDUCgUGDBggLgvIyMDEyZMgJWVFUxMTNCzZ088fPhQPG5jY4PPP/8cc+fOLYuStVpWdg7uxf6DSzceYM6aEFz7+xHGfeYuHtfT08H2Jd6oVrkSuo9ZW2Cvi6mxHCHrxr7quZm0CdnZHDKi8snO3h7OzvWU9tWt64zY2Aevjtu9Cu5PFMq9j0+fxsPGRrk3hqRJBjWHjSQ8Y7fMe166dOmCuLg4pc3JyamsywIArF69GsOGDYOOzr8/Jl9fXwQHB2Pnzp04c+YMkpOT0b17d+Tk5Ihthg0bhu3btyMhoeCJoFQ6ZJBBbvBqZDQvuNSsao1uo9fieWJKvvZmJoY4GDAemVk56OO7ERmZ2aVdMpHKWrX+EH//fUtp3+3bf6Nq1WoAgOpOTrCzs8OJE8fE45mZmfjj99No2ap1qdZKJUOb57yUeXiRy+Wws7NT2nR1dbF8+XK4urrCxMQEjo6OGDt2LJKTkwu9zpUrV9CuXTuYmZnB3NwcTZo0QXh4uHj87NmzaNOmDYyMjODo6AgfHx+kpOT/CyzPP//8g+PHj6Nnz57ivsTERGzevBnLli2Dh4cH3NzcsG3bNly7dg3Hjx8X27m6usLOzg7BwcFq/nRIVfPG98CHbjVR1d4S9T9wgN+4HmjTtBZ2Hg6Hrq4Odnw7Ao3rVcWwWUHQ1ZHBtpIZbCuZQV9PF8CrHpeD68fB2NAAo+dth7mJodhGR0e6/wen99cEn69w4XwYli5ehLt37mDnzzvw4w/fY9SYcQBe/cU2zscX3y5ehF/3B+N6VBRGeg+FkbEx+n82sIyrJ42QaWCTqHI7YVdHRwerV69G9erVER0djbFjx2Lq1KlYv359ge0HDRoENzc3BAQEQFdXF5cvX4a+vj4A4Nq1a+jcuTPmz5+PzZs34+nTpxg/fjzGjx+PLVu2FHi9M2fOwNjYGM7OzuK+iIgIZGVloVOnf2fvOzg4wMXFBWfPnkXnzp3F/c2bN8cff/yB4cOH57t2RkYGMjIyxNdJSUlF++FQPjaVzLB5wRewszJHYnI6om4/Qs9x6xF6/i9UtbdED/cGAIALu2YonddpxCr8EXEbbs5V0bzBqx6/Gwf8lNrU6ToHD+Kel8rnIFJV02bNsGtPMObMmoFFC75BdScnfLtsJT4bOEhsM3nKVKSnpcF3wlgkJCSgWfMWOHj4KO/xQpJX5uHl4MGDMDU1FV97enril19+ga+vr7jPyckJ8+fPx5gxYwoNLw8ePMDXX3+NunXrAgBq1aolHvv2228xcOBA8Zq1atXC6tWr0bZtWwQEBMDQMP9dVGNiYmBra6s0ZKRQKGBgYICKFSsqtbW1tRVn9uepXLkyIiMjC6zV398f8+bNK/AYFc+YeYVPqn4Q9xxGbuPfev4fEbff2YaovOnarTu6dute6HGZTIb/zPHDf+b4lV5RVGq0ebVRmYeXdu3aISDg39nxJiYmAICTJ09i0aJFuHHjBpKSkpCdnY309HSkpKSIbV43adIkjBgxAlu3boWHhwf69u2LmjVrAnjVY3Lnzh1s375dbC8IAnJzcxEdHa3Uu5InLS2twFBTkIJm7xsZGSE1NbXA9jNmzMCkSZPE10lJSXB0dFTpvYiIiADtDi9lPufFxMQEH3zwgbjZ29vj/v376Nq1K1xcXLB3715ERERg3bp1AICsrKwCr+Pn54fr16+jW7duCA0NRb169cQ5J7m5uRg1ahQuX74sbleuXMHt27fFgPMmKyurfBNu7ezskJmZmW9/fHw8bN+4l8Lz589hbW1d4LXlcjnMzc2VNiIiIlJNmYeXgoSHhyM7OxvLli1Dy5YtUbt2bTx+/Pid59WuXRtfffUVjh49it69e4vzWRo3bozr168rhaS8zcCg4Nvxu7m5QaFQKAWVJk2aQF9fH8eO/Tt7Py4uDlFRUWjdWnn2flRUFNzc3Irz8YmIiN5JJlN/k6pyGV5q1qyJ7OxsrFmzBvfu3cPWrVuxYcOGQtunpaVh/PjxOHXqFO7fv48///wTFy9eFIeDpk2bhnPnzmHcuHG4fPkybt++jZCQEEyYMKHQa7q5ucHa2hp//vnvHVYtLCzg7e2NyZMn48SJE4iMjMTgwYPh6uoKDw8PsV1qaioiIiKUJvYSERFp0qsAos5S6bL+BMVXLsNLo0aNsHz5cixZsgQuLi7Yvn07/P39C22vq6uLZ8+e4YsvvkDt2rXRr18/eHp6ipNiGzRogNOnT+P27dv4+OOP4ebmhtmzZ8Pe3v6t1xw+fLjSPBkAWLFiBby8vNCvXz98+OGHMDY2xoEDB6Crqyu2+fXXX1G1alV8/PHHav4kiIiIygd/f380a9YMZmZmsLGxgZeXF27dUr7XUEE3n23ZsqVSm3fd7FUVfKr0Wzx58gT169dHREQEqlWrpvJ5zZs3h6+vLwYOVO1eCnyqNL3v+FRpep+V1VOla/jsga48/wIWVeVkpODe6j4q192lSxcMGDAAzZo1Q3Z2NmbNmoVr167hxo0b4kKaoUOH4smTJ0q3ITEwMIClpaX4esyYMThw4AACAwNRqVIlTJ48Gc+fP0dERIRSR8DblPlqo/LM1tYWmzdvxoMHD1QOL/Hx8ejTpw8+++yzEq6OiIi0WWmvNjpy5IjS6y1btsDGxgYRERFo06aNuD/v5rMFybvZa97KYADYtm0bHB0dcfz4caX7pb1NuRw2Kk969epVpOEfGxsbTJ06VdJL0IiIqPzT1ITdpKQkpe31m6i+TWJiIgAo9aoAwKlTp2BjY4PatWtj5MiRiI+PF4+962avqmJ4ISIi0mKOjo6wsLAQt7fNMc0jCAImTZqEjz76CC4uLuJ+T09PbN++HaGhoVi2bBkuXryI9u3bi4GoKDd7fRsOGxEREUmQjo5MrWevCf8/NzY2VmnOi1wuf+e548ePx9WrV3HmzBml/f379xf/7OLigqZNm6JatWo4dOgQevfuXXgtBdzs9W3Y80JERCRBmho2evOmqe8KLxMmTEBISAhOnjyJKlWqvLWtvb09qlWrhtu3bwMo2s1e34bhhYiIiN5JEASMHz8e+/btQ2hoKJycnN55zrNnzxAbGyvemqQoN3t9Gw4bERERSVBprzYaN24cduzYgV9//RVmZmbiHBULCwsYGRkhOTkZfn5++PTTT2Fvb4+YmBjMnDkTVlZW+OSTT8S2eTd7rVSpEiwtLTFlypR8N3t9F4YXIiIiCVL3Fv9FPTfvIcru7u5K+7ds2YKhQ4dCV1cX165dw08//YQXL17A3t4e7dq1w65du2BmZia2X7FiBfT09NCvXz+kpaWhQ4cOCAwMVPkeLwDDCxEREangXfe0NTIywn//+993XsfQ0BBr1qzBmjVril0LwwsREZEElfawUXnC8EJERCRB2hxeuNqIiIiIJIU9L0RERBJU2hN2yxOGFyIiIgmSQc1hI0g3vTC8EBERSZA297xwzgsRERFJCnteiIiIJEibVxsxvBAREUkQh42IiIiIJII9L0RERBLEYSMiIiKSFA4bEREREUkEe16IiIgkiMNGREREJC1qDhtJ+Aa7HDYiIiIiaWHPCxERkQRx2IiIiIgkRZtXGzG8EBERSZA297xwzgsRERFJCnteiIiIJIjDRkRERCQpHDYiIiIikgj2vBAREUmQNve8MLwQERFJkDbPeeGwEREREUkKe16IiIgkiMNGREREJCnaPGzE8EJERCRB2tzzwjkvREREJCnseSEiIpIgGdQcNtJYJaWP4YWIiEiCdGQy6KiRXtQ5t6xx2IiIiIgkhT0vREREEsTVRkRERCQpXG1EREREJBHseSEiIpIgHdmrTZ3zpYrhhYiISIpkag79SDi8cNiIiIiIJIU9L0RERBLE1UZEREQkKbL//6fO+VLF8EJERCRB2jxhl3NeiIiISFLY80JERCRB2nyTOpXCy+rVq1W+oI+PT7GLISIiItVwwu47rFixQqWLyWQyhhciIiIqUSqFl+jo6JKug4iIiIpARyaDjhrdJ+qcW9aKPWE3MzMTt27dQnZ2tibrISIiIhXkDRups0lVkcNLamoqvL29YWxsjPr16+PBgwcAXs11Wbx4scYLJCIiInpdkcPLjBkzcOXKFZw6dQqGhobifg8PD+zatUujxREREVHB8lYbqbNJVZGXSu/fvx+7du1Cy5YtlT54vXr1cPfuXY0WR0RERAXjaqMiePr0KWxsbPLtT0lJkXSKIyIikhJO2C2CZs2a4dChQ+LrvMCyadMmtGrVSnOVERERERWgyD0v/v7+6NKlC27cuIHs7GysWrUK169fx7lz53D69OmSqJGIiIjeIPv/ps75UlXknpfWrVvjzz//RGpqKmrWrImjR4/C1tYW586dQ5MmTUqiRiIiInoDJ+wWkaurK4KCgjRdCxEREdE7FSu85OTkIDg4GDdv3oRMJoOzszN69eoFPT0+55GIiKg06MhebeqcL1VFThtRUVHo1asXFAoF6tSpAwD4+++/YW1tjZCQELi6umq8SCIiIlKmzU+VLvKclxEjRqB+/fp4+PAhLl26hEuXLiE2NhYNGjTAl19+WRI1EhEREYmKHF6uXLkCf39/VKxYUdxXsWJFLFy4EJcvX9ZkbURERPQWpflcI39/fzRr1gxmZmawsbGBl5cXbt26pdRGEAT4+fnBwcEBRkZGcHd3x/Xr15XaZGRkYMKECbCysoKJiQl69uyJhw8fFqmWIoeXOnXq4MmTJ/n2x8fH44MPPijq5YiIiKgYSnu10enTpzFu3DiEhYXh2LFjyM7ORqdOnZCSkiK2Wbp0KZYvX461a9fi4sWLsLOzQ8eOHfHy5Uuxja+vL4KDg7Fz506cOXMGycnJ6N69O3JyclSuRaU5L0lJSeKfFy1aBB8fH/j5+aFly5YAgLCwMHzzzTdYsmSJym9MRERE0nHkyBGl11u2bIGNjQ0iIiLQpk0bCIKAlStXYtasWejduzcAICgoCLa2ttixYwdGjRqFxMREbN68GVu3boWHhwcAYNu2bXB0dMTx48fRuXNnlWpRKbxUqFBBKaEJgoB+/fqJ+wRBAAD06NGjSMmJiIiIikdTq41e76AAALlcDrlc/s7zExMTAQCWlpYAgOjoaCgUCnTq1EnpWm3btsXZs2cxatQoREREICsrS6mNg4MDXFxccPbsWc2Gl5MnT6p0MSIiIiodmlpt5OjoqLR/7ty58PPze+u5giBg0qRJ+Oijj+Di4gIAUCgUAABbW1ultra2trh//77YxsDAQGnebF6bvPNVoVJ4adu2rcoXJCIiopKnqccDxMbGwtzcXNyvSq/L+PHjcfXqVZw5cyb/dd8IVIIgvDNkqdLmdcW+q1xqaioePHiAzMxMpf0NGjQo7iWJiIiolJmbmyuFl3eZMGECQkJC8Pvvv6NKlSrifjs7OwCvelfs7e3F/fHx8WJvjJ2dHTIzM5GQkKDU+xIfH4/WrVurXEORVxs9ffoU3bt3h5mZGerXrw83NzeljYiIiEqejkym9lYUgiBg/Pjx2LdvH0JDQ+Hk5KR03MnJCXZ2djh27Ji4LzMzE6dPnxaDSZMmTaCvr6/UJi4uDlFRUSUbXnx9fZGQkICwsDAYGRnhyJEjCAoKQq1atRASElLUyxEREVExqHOPl+Lc62XcuHHYtm0bduzYATMzMygUCigUCqSlpf2/Hhl8fX2xaNEiBAcHIyoqCkOHDoWxsTEGDhwIALCwsIC3tzcmT56MEydOIDIyEoMHD4arq6u4+kgVRR42Cg0Nxa+//opmzZpBR0cH1apVQ8eOHWFubg5/f39069atqJckIiKici4gIAAA4O7urrR/y5YtGDp0KABg6tSpSEtLw9ixY5GQkIAWLVrg6NGjMDMzE9uvWLECenp66NevH9LS0tChQwcEBgZCV1dX5VqKHF5SUlJgY2MD4NXyqKdPn6J27dpwdXXFpUuXino5IiIiKobSfrZR3m1R3nVNPz+/t65WMjQ0xJo1a7BmzZoivf/rinWH3bzbATdq1AgbN27Eo0ePsGHDBqUJOkRERFRySnvYqDwpcs+Lr68v4uLiALxaC965c2ds374dBgYGCAwM1HR9REREREqKHF4GDRok/tnNzQ0xMTH466+/ULVqVVhZWWm0OCIiIipYcVYMvXm+VBX7Pi95jI2N0bhxY03UQkRERCpSd+hHwtlFtfAyadIklS+4fPnyYhdDRERE9C4qhZfIyEiVLqbOrGcCpi8cC0MTs3c3JJKYM7f/KesSiEpMSvLLMnnf0l5tVJ7wwYxEREQSpINiLBl+43ypUnvOCxEREZU+be55kXLwIiIiIi3EnhciIiIJkskAHa42IiIiIqnQUTO8qHNuWeOwEREREUlKscLL1q1b8eGHH8LBwQH3798HAKxcuRK//vqrRosjIiKiguVN2FVnk6oih5eAgABMmjQJXbt2xYsXL5CTkwMAqFChAlauXKnp+oiIiKgAecNG6mxSVeTwsmbNGmzatAmzZs2Crq6uuL9p06a4du2aRosjIiIielORJ+xGR0fDzc0t3365XI6UlBSNFEVERERvp83PNipyz4uTkxMuX76cb/9vv/2GevXqaaImIiIieoe8p0qrs0lVkXtevv76a4wbNw7p6ekQBAEXLlzAzz//DH9/f/zwww8lUSMRERG9gY8HKIJhw4YhOzsbU6dORWpqKgYOHIjKlStj1apVGDBgQEnUSERERCQq1k3qRo4ciZEjR+Kff/5Bbm4ubGxsNF0XERERvYU2z3lR6w67VlZWmqqDiIiIikAH6s1b0YF000uRw4uTk9Nbb2xz7949tQoiIiIiepsihxdfX1+l11lZWYiMjMSRI0fw9ddfa6ouIiIiegsOGxXBxIkTC9y/bt06hIeHq10QERERvRsfzKgBnp6e2Lt3r6YuR0RERFQgtSbsvm7Pnj2wtLTU1OWIiIjoLWQyqDVhV6uGjdzc3JQm7AqCAIVCgadPn2L9+vUaLY6IiIgKxjkvReDl5aX0WkdHB9bW1nB3d0fdunU1VRcRERFRgYoUXrKzs1G9enV07twZdnZ2JVUTERERvQMn7KpIT08PY8aMQUZGRknVQ0RERCqQaeA/qSryaqMWLVogMjKyJGohIiIiFeX1vKizSVWR57yMHTsWkydPxsOHD9GkSROYmJgoHW/QoIHGiiMiIiJ6k8rhZfjw4Vi5ciX69+8PAPDx8RGPyWQyCIIAmUyGnJwczVdJRERESrR5zovK4SUoKAiLFy9GdHR0SdZDREREKpDJZG991qAq50uVyuFFEAQAQLVq1UqsGCIiIqJ3KdKcFymnNCIiovcJh41UVLt27XcGmOfPn6tVEBEREb0b77Cronnz5sHCwqKkaiEiIiJ6pyKFlwEDBsDGxqakaiEiIiIV6chkaj2YUZ1zy5rK4YXzXYiIiMoPznlRQd5qIyIiIioH1JzzIuGnA6geXnJzc0uyDiIiIiKVFPnxAERERFT2dCCDjhrdJ+qcW9YYXoiIiCRIm5dKF/mp0kRERERliT0vREREEsTVRkRERCQp2nyfFw4bERERkaSw54WIiEiCtHnCLsMLERGRBOlAzWEjCS+V5rARERERSQp7XoiIiCSIw0ZEREQkKTpQb/hEykMvDC9EREQSJJPJIFOj+0Sdc8ualIMXERERaSH2vBAREUmQ7P+bOudLFcMLERGRBPEOu0REREQSwZ4XIiIiiZJu34l6GF6IiIgkSJvv88JhIyIiIlLJ77//jh49esDBwQEymQz79+9XOj506FBxCXfe1rJlS6U2GRkZmDBhAqysrGBiYoKePXvi4cOHRaqD4YWIiEiC3gwJxdmKKiUlBQ0bNsTatWsLbdOlSxfExcWJ2+HDh5WO+/r6Ijg4GDt37sSZM2eQnJyM7t27IycnR+U6OGxEREQkQWVxh11PT094enq+tY1cLoednV2BxxITE7F582Zs3boVHh4eAIBt27bB0dERx48fR+fOnVWqgz0vREREEqSpnpekpCSlLSMjQ626Tp06BRsbG9SuXRsjR45EfHy8eCwiIgJZWVno1KmTuM/BwQEuLi44e/asyu/B8EJERKTFHB0dYWFhIW7+/v7Fvpanpye2b9+O0NBQLFu2DBcvXkT79u3FQKRQKGBgYICKFSsqnWdrawuFQqHy+3DYiIiISII0dYfd2NhYmJubi/vlcnmxr9m/f3/xzy4uLmjatCmqVauGQ4cOoXfv3oWeJwhCkebgsOeFiIhIgjQ1bGRubq60qRNe3mRvb49q1arh9u3bAAA7OztkZmYiISFBqV18fDxsbW1Vvi7DCxEREZWIZ8+eITY2Fvb29gCAJk2aQF9fH8eOHRPbxMXFISoqCq1bt1b5uhw2IiIikqCyWG2UnJyMO3fuiK+jo6Nx+fJlWFpawtLSEn5+fvj0009hb2+PmJgYzJw5E1ZWVvjkk08AABYWFvD29sbkyZNRqVIlWFpaYsqUKXB1dRVXH6mC4YWIiEiCinuvltfPL6rw8HC0a9dOfD1p0iQAwJAhQxAQEIBr167hp59+wosXL2Bvb4927dph165dMDMzE89ZsWIF9PT00K9fP6SlpaFDhw4IDAyErq6uynUwvBAREZFK3N3dIQhCocf/+9//vvMahoaGWLNmDdasWVPsOhheiIiIJEhTq42kiOGFiIhIgvhgRiIiIiKJYM8LERGRBOlABh01Bn/UObesMbwQERFJkDYPGzG8EBERSZDs//+pc75Ucc4LERERSQp7XoiIiCSIw0ZEREQkKTI1J+xy2IiIiIiolLDnhYiISII4bERERESSos3hhcNGREREJCnseSEiIpIgbb7PC8MLERGRBOnIXm3qnC9VHDYiIiIiSWHPCxERkQRx2IiIiIgkRZtXGzG80HvDsYIhWlStAFszOczketh7NQ63/0kVj09vX7PA80LvPMOFBy8AAJ3rWKG6pTFMDXSRlSPgUWI6Tt59huepWaXxEYgKdTX8LH75cR3+vn4Fz58+gd/qIHzo0VU8/tPapTj1WzCeKh5DT18fteo1xLCJM+HcsEm+awmCgFmjBuDimdB81yHpkEG93hMJZxeGF3p/6Ovo4ElyJq7GvURvV7t8x9eciVF6XaOSMbrWtcat+GRxn+JlBm48SUZSejYM9XTwkZMl+jeyx4azDyCU9Acgeov01FTUqFMfnT75DN9MHJbveJXqNTF+1mLYO1ZDRno69v60AdNH9kXQkQuoYGml1HbfTxul/c9u0noML/TeuPc8FfeepxZ6PCUzR+l1LSsT3E9IQ2J6trjvyuOX4p8TAfx+7zm8WzjCwkgPL9KyQVRWmrfxQPM2HoUeb9/9U6XXo6fNx5G923Hv1g00btVG3H/3ryjsDQrA2l1H0b+tS4nVSyWPq42ItIyxvi5qVjLG1biXhbbR15Ghgb0ZXqRlISmdwYWkIyszE4d3/wQTM3PUrFtf3J+elopFU0Zh/KzFsLS2LcMKSRNkGvhPqtjzQlrJ1d4MmTm5uPU0Jd8xt8rmaFezEgz0dPBPSiZ2Xn6MXI4ZkQSEnTqKhZNHIiM9DZbWtljywx5YVKwkHt+weDbquTVD6w6eZVglkfrY8/IWz549g42NDWJiYlQ+5+DBg3Bzc0Nubm7JFUZqa2BvhhuKZOQUkEpuKJKx5eJDbL/0CAmpWfCqbwddKfevktZo2PxDbNh3Eit3HEazj9pjwaQRSHj2FABwNvQIIs//gbHTF5RxlaQpeauN1NmkqlyFF5lM9tZt6NChpVqPv78/evTogerVq4v7Jk6ciCZNmkAul6NRo0b5zunevTtkMhl27NhReoVSkVSxMEQlEwNciUsq8HhGTi4S0rIQ+yIdwVEKWJroo7a1SSlXSVR0RsYmqFytBuo1bIrJC1ZBR1cXR/ZuBwBcPv8H4mJj4NXyA3R2tUPn/09q/8Z3GCYP6VWWZVMxyTSwSVW5GjaKi4sT/7xr1y7MmTMHt27dEvcZGRkptc/KyoK+vn6J1JKWlobNmzfj8OHDSvsFQcDw4cNx/vx5XL16tcBzhw0bhjVr1mDw4MElUhupp6GDGeKS0hGfnKlSexkAPSn/E4W0lyAgK/PV93zACB949lH+nfRlrzYYPW0+WrbrXBbVERVbuep5sbOzEzcLCwvIZDLxdXp6OipUqIDdu3fD3d0dhoaG2LZtG/z8/PL1gKxcuVKptwQAtmzZAmdnZxgaGqJu3bpYv379W2v57bffoKenh1atWintX716NcaNG4caNWoUem7Pnj1x4cIF3Lt3r8DjGRkZSEpKUtpIffq6MtiYGsDG1AAAUMFIHzamBjCX/5vRDXRlqGNjqrSqKI+FoR5aVqsAW7NX5ziYy+HlYofsXAF3nxW+iomoNKSlJOPOzWu4c/MaAEDx6AHu3LyG+McPkZaags0rFuDGlXA8eRSL2zeuYNlsXzx9Eoc2nXsCACytbeFUy1lpAwAb+yqwr1KtzD4XFZ8OZNCRqbFJuO+lXPW8qGLatGlYtmwZtmzZArlcju+///6d52zatAlz587F2rVr4ebmhsjISIwcORImJiYYMmRIgef8/vvvaNq0abFqrFatGmxsbPDHH38UGHL8/f0xb968Yl2bCmdvJsfAxpXF1x1qvbq3xbW4JBy6+Wrc39nWFDIAN58k5zs/J1eAo4UhmjlawFBPFymZOYh9kYatEY+QmpWTrz1Rafr7+hVMGeolvt6wZDYAoKNXf/jO/Q6x0XdwbOIwJCU8h1mFiqjj4oYVWw+geq26ZVQxlTR1h36kG10kGF58fX3Ru3fvIp0zf/58LFu2TDzPyckJN27cwMaNGwsNLzExMXBwcCh2nZUrVy50ou+MGTMwadIk8XVSUhIcHR2L/V70yoMX6Vgcevetba48fllgrwsAJGfm4JeripIojUhtDZt/iGM3nhZ63G91YJGv+bbrkQRocXqRXHgpam/I06dPERsbC29vb4wcOVLcn52dDQsLi0LPS0tLg6GhYbHrNDIyQmpqwUMNcrkccrm82NcmIiLSZpILLyYmyqs+dHR0IAjKy12zsv59Dk3ekuVNmzahRYsWSu10dXULfR8rKyskJCQUu87nz5/D2tq62OcTERG9DZ8qLWHW1tZQKBQQBAGy/68IuXz5snjc1tYWlStXxr179zBo0CCVr+vm5oZt27YVq6b09HTcvXsXbm5uxTqfiIjondS9V4t0s4v0w4u7uzuePn2KpUuXok+fPjhy5Ah+++03mJubi238/Pzg4+MDc3NzeHp6IiMjA+Hh4UhISFCae/K6zp07Y8aMGUhISEDFihXF/Xfu3EFycjIUCgXS0tLEoFSvXj0YGLxa5RIWFga5XJ5vpRIRERGpr1wtlS4OZ2dnrF+/HuvWrUPDhg1x4cIFTJkyRanNiBEj8MMPPyAwMBCurq5o27YtAgMD4eTkVOh1XV1d0bRpU+zevTvftdzc3LBx40b8/fffcHNzg5ubGx4/fiy2+fnnnzFo0CAYGxtr9sMSERH9nzbfpE4mvDlhhESHDx/GlClTEBUVBR0d1XLe06dPUbduXYSHh781HL0uKSkJFhYWmBsSCUMTM3VKJiqXmtoXPjmeSOpSkl/Cq3kNJCYmKvX6l5S8vzNCrzyAqVnx3y/5ZRLaN6xaanVrkuSHjUpS165dcfv2bTx69EjlpczR0dFYv369ysGFiIiIiobh5R0mTpxYpPbNmzdH8+bNS6gaIiKiV7jaiIiIiCRF3SdDS/mRbZKfsEtERETahT0vREREEqTFTwdgeCEiIpIkLU4vDC9EREQSpM0TdjnnhYiIiCSFPS9EREQSpM2rjRheiIiIJEiLp7xw2IiIiIikhT0vREREUqTFXS8ML0RERBLE1UZEREREEsGeFyIiIgniaiMiIiKSFC2e8sLwQkREJElanF4454WIiIgkhT0vREREEqTNq40YXoiIiCRImyfsctiIiIiIJIU9L0RERBKkxfN1GV6IiIgkSYvTC4eNiIiISFIYXoiIiCRIpoH/iur3339Hjx494ODgAJlMhv379ysdFwQBfn5+cHBwgJGREdzd3XH9+nWlNhkZGZgwYQKsrKxgYmKCnj174uHDh0Wqg+GFiIhIgvJWG6mzFVVKSgoaNmyItWvXFnh86dKlWL58OdauXYuLFy/Czs4OHTt2xMuXL8U2vr6+CA4Oxs6dO3HmzBkkJyeje/fuyMnJUbkOznkhIiIilXh6esLT07PAY4IgYOXKlZg1axZ69+4NAAgKCoKtrS127NiBUaNGITExEZs3b8bWrVvh4eEBANi2bRscHR1x/PhxdO7cWaU62PNCREQkQTINbACQlJSktGVkZBSrnujoaCgUCnTq1EncJ5fL0bZtW5w9exYAEBERgaysLKU2Dg4OcHFxEduoguGFiIhIijSUXhwdHWFhYSFu/v7+xSpHoVAAAGxtbZX229raiscUCgUMDAxQsWLFQtuogsNGREREEqSpxwPExsbC3Nxc3C+Xy9Wr643JNIIg5Nv3JlXavI49L0RERFrM3NxcaStueLGzswOAfD0o8fHxYm+MnZ0dMjMzkZCQUGgbVTC8EBERSZG6K400fJM6Jycn2NnZ4dixY+K+zMxMnD59Gq1btwYANGnSBPr6+kpt4uLiEBUVJbZRBYeNiIiIJKgsbrCbnJyMO3fuiK+jo6Nx+fJlWFpaomrVqvD19cWiRYtQq1Yt1KpVC4sWLYKxsTEGDhwIALCwsIC3tzcmT56MSpUqwdLSElOmTIGrq6u4+kgVDC9ERESkkvDwcLRr1058PWnSJADAkCFDEBgYiKlTpyItLQ1jx45FQkICWrRogaNHj8LMzEw8Z8WKFdDT00O/fv2QlpaGDh06IDAwELq6uirXIRMEQdDcx6LiSEpKgoWFBeaGRMLQxOzdJxBJTFN7i7IugajEpCS/hFfzGkhMTFSa+FpS8v7OiLyrgJlZ8d/v5cskuNW0K7W6NYk9L0RERBKkqdVGUsQJu0RERCQp7HkhIiKSoOI+n+j186WK4YWIiEiCymK1UXnBYSMiIiKSFPa8EBERSZEWd70wvBAREUmQNq82YnghIiKSIBnUnLCrsUpKH+e8EBERkaSw54WIiEiCtHjKC8MLERGRFGnzfV44bERERESSwp4XIiIiSdLegSOGFyIiIgnisBERERGRRLDnhYiISIK0d9CI4YWIiEiStHnYiOGFiIhIgrT58QCc80JERESSwp4XIiIiKdLiSS8ML0RERBKkxdmFw0ZEREQkLex5ISIikiCuNiIiIiJJ4WojIiIiIolgzwsREZEUafGMXYYXIiIiCdLi7MJhIyIiIpIW9rwQERFJEFcbERERkcSot9pIygNHDC9EREQSpM09L5zzQkRERJLC8EJERESSwmEjIiIiCeKwEREREZFEsOeFiIhIgrT52UYML0RERBLEYSMiIiIiiWDPCxERkQRp87ONGF6IiIikSIvTC8MLERGRBGnzhF3OeSEiIiJJYc8LERGRBGnzaiOGFyIiIgnS4ikvHDYiIiIiaWHPCxERkRRpcdcLwwsREZEEcbURERERkUSw56UcEAQBAJCRmlzGlRCVjJRk/juJ3l+pyS8B/Pu7vLS8fJmk1oqhly+TNFdMKWN4KQdevnz1xV884OMyroSIiIrr5cuXsLCwKPH3MTAwgJ2dHWo5Oap9LTs7OxgYGGigqtIlE0o7KlI+ubm5ePz4MczMzCCT8sJ7iUhKSoKjoyNiY2Nhbm5e1uUQaRy/46VLEAS8fPkSDg4O0NEpnV7G9PR0ZGZmqn0dAwMDGBoaaqCi0sWel3JAR0cHVapUKesytI65uTl/sdN7jd/x0lMaPS6vMzQ0lGTo0BQORBMREZGkMLwQERGRpDC8kNaRy+WYO3cu5HJ5WZdCVCL4Haf3HSfsEhERkaSw54WIiIgkheGFiIiIJIXhhYiIiCSF4YWIiIgkheGFiIiQm5tb1iUQqYzhhagY+Iue3hdZWVkAIN7Wnt9tkgKGFyIVpKWlYcyYMTh27Bju3btXas8vISpJOTk5GDFiBLy8vBAUFITHjx/zu02SwG8pkQpyc3ORkJCAoKAgNGvWDCtXrkRkZGRZl0WklqysLEyePBk1atRAcHAw3NzcsH37dsTFxZV1aURvxZvUERVBWloatm7dinXr1qFy5cro378/hgwZUtZlEantxYsXWLlyJdatW4d+/frB29sbjRs3LuuyiArE8EJUAEEQIJPJCt134cIFbNq0CRcuXMCoUaMwduzYsiiTqEje9b0GgJ07d2LJkiVo2LAhpk6dinr16pV2mUTvxGEjoje8/sv8r7/+ws2bN6FQKJR+wTdv3hxTp05F+/bt8dNPP+HQoUNlVS6RSl7/Xj9//hzAq+HQvH15/44dMGAA5s6di7CwMOzZs0dsR1SeMLwQvSHvl/nMmTPRtWtXdOrUCbVq1YKfnx+uXLkitqtVqxZGjBgBGxsbHDx4EOnp6WBHJpVXed/rb775Bh9++CGioqKgo6MjBhOZTCZ+f728vODr64sFCxYgMjKSk3ip3OGwEVEBNmzYgNmzZ2P79u2oXLkyTp48iXXr1qF+/fqYMGEC2rZtK7Y9dOgQ+vXrh0OHDsHd3b3siiZ6h++//x5Tp06Fk5MTjI2NsXHjRri4uCA3N1cMKK/30AwbNgyJiYnYsWMHDA0Ny7J0IiWM00SvyftX6Pnz5+Hl5YVOnTqhfv36GD9+PL777jvEx8djzZo1uHTpknhOt27dMH78eGzevBmZmZllVTrRWz148ADBwcGYMmUK/Pz8ULFiRXh7exfYA5OnT58+ePHiRb55MkRljeGFCP+Glrx/febk5CAxMREAkJ2dDeBVSJk+fTr+/vtv/PLLL0rH3Nzc8OTJE+jq6pZ26USFyrsBHQBUrVoV3t7e6NGjB3r16gUfHx9YWVnB29sb165dg46OTr5hzy5duiA9PR1Hjhwp7dKJ3orhhbReRkYGFi5ciKSkJHFf8+bNERISghs3bkBPT0/sUenatSsmTJiAFStWICYmBnp6egBeTXJs3749Xr58WSafgehNubm58PDwwM8//yzu69OnDxo2bAgA6NSpEyZOnAgrKyuMGDECUVFRkMlkuHXrFq5evQoA0NXVxerVq5WGSYnKA4YX0nrPnj3Dxo0bcf78eXHf+PHj4eHhAU9PTygUChgYGIgBplevXrCyskJMTAyAf3ttJk+ejAoVKpR2+UQF0tHRgYeHB65du4bc3Fzk5OSIx/K+s506dYKPjw+sra3x5ZdfIiQkBB999BGWL18utnVzc+P3msodhhfSarm5uXBwcMAXX3yB//73v8jMzBR/sS9cuBBVq1ZFixYtcPv2bRgYGAAA/vnnH+jr60MulwP4d6hJX1+/bD4EUSGqVauGPXv2IDExEbq6ukrDo3lDRJ07d8ZXX30FAwMDeHl54aOPPkJgYKB4DQ6FUnnE1UZEALZv347p06fj+PHjqFOnjrg/MjISM2bMwOnTp+Ht7Q1zc3OEhISgVq1aCA4OLsOKiVTTrl07WFpaYs+ePZDJZAWuLLp9+zaaNWuGrl27YseOHQCg1I6ovGF4Ifo/Ly8v3Lt3D2FhYTA2Nhb35+bm4rvvvsPp06eho6MDZ2dnLF26VDzGX/BUHuV9N4ODg/Hdd9/By8sLX3/9tdIx4NVjAT755BMYGRnh8OHD+Y4TlUcML6T18n5RR0ZGYsyYMbC2tsauXbtgbGyM7OxscVJuVlaW0tAQf8GTFCQlJWHmzJm4cuUKBg4ciNGjR0MmkyEnJ0ccEjp58iTatWsHgN9rkgaGF6L/y8nJwZ49e7BixQoYGRlh7969sLS0VDqe98u+oGfEEJU3ed/Tf/75B1999RWio6PRokULfPvtt0oBJa8dgwtJBb+lRHj1y1tXVxe9e/fGnDlzkJOTg3r16mH37t24c+cOAOWJiwwuJAV5gcTKygqrVq1Cjx49cObMGbi6uuLEiRP466+/xHYAGFxIMtjzQlrjXU/Uff3PGRkZmDNnDi5duoTHjx/j888/R//+/eHk5FTqdRO9TWG9Ja9/n/PaZGVl4dmzZ5g3bx4ePXqEu3fvYsWKFejQoQNXFZGkMLyQVnh9yCcjIwPZ2dkwMTEB8PYhoEePHuHWrVu4fv06Bg8ejIoVK5ZazUTv8vr3+ubNm8jJyYGZmRmqVasG4O3zV168eIHY2FjY2dnB2tq61Gom0gSGF3rvvf4Lftq0aYiMjER6ejoaNWqEVatWFRhc8n7p5wUbznGh8ub1YDJ48GDcvn0b9+7dg5ubG9q0aYP//Oc/7zyPSKoYXkhrfPrpp/j777/h4+MDGxsbfPLJJxg9ejRWrVrFG8yRZA0ZMgRhYWHYv38/DA0NMWLECFy9ehWXLl2Co6NjWZdHVCIYv0krhIaG4u7duwgJCcHIkSPx4MEDVKxYEb169VIKLszyJCUPHz5EdHQ0du3aBWdnZ4SEhODKlSvYsWMHHB0d+awtem8xvJBWePDgAeRyOZycnLB06VLMnTsXP//8Mzp37oz79+9j9+7dALiKiMq3vNv758nKysL9+/dhZWWF5cuXY968edi+fTs6duyIFy9eYP369bh27VoZVUtUchhe6L1T0APoatasCQsLC/j6+sLf3x+7du1Cp06dAABRUVHYsWOH+KBFovLqzbkqMpkMVlZW8PHxweLFi7Fz50507twZAPDXX3/hxIkTSEhIKItSiUoUwwu9V16fnLty5Ur88ccfSEtLg62tLV68eIENGzZg4cKF6NixIwAgLi4Os2fPRo0aNVC9evUyrJxINf/5z3/QoUMHAED16tXRv39/7N+/H4MHD4aHhwcAICYmBqNGjYKDgwPatGlTluUSlQhO2KX3xusrgvr06YOoqCgsXrwYHh4eMDU1xW+//YYxY8agfv36cHNzg6WlJTZv3owaNWrgwIED+a5BVN5kZWVhy5YtWLNmDerUqYM9e/YAAKZPn44VK1aIQUWhUMDJyQkhISEA+L2m9w/DC70XXn8G0ZgxY/D777/jxIkTsLOzA/Dq3i5yuRxhYWHYunUrDh8+jGbNmqFGjRpYvHgxAC4hpfLn9Z7EPGlpadi3bx/8/f1Rp04d7N27FwCwZ88eXL9+HdnZ2ahduzY+//xzAPxe0/uJ4YUkKz09HYMGDcK6detgZ2eH7OxspKeno0+fPujbty+8vb1x5coVhIeHY+PGjWjSpAl8fHzg7OyM1NTUfE+O5i94Kq+2b9+OQYMGia/T0tKwd+9e+Pv7o169evjll18A5P8e83tN7yt+q0my/v77b9y8eROdOnVCfHw89PT0kJqaigcPHiAsLAxz5szBlClTsGfPHjg7OyMyMhIBAQHIycmBkZGReB1BEPgLnsqV7Oxs8c+HDx/G1KlT4evrK+4zMjLCJ598ghEjRuDQoUMYPnw4gPwTevm9pvcVv9kkWa6urti8eTMqVKgAd3d3PHnyBDY2Nli4cCEiIyPxyy+/4LPPPsOyZcsQFBQENzc3pKamQldXV2n8n3MBqKy92QGeNwS6aNEiZGdnY+LEiTh58iQmTpwotjExMUGnTp1gZWWF3bt3Y9WqVaVaM1FZYnghScqbgNiqVSssXrwYVlZWcHd3R1xcHD755BMcOnQIFy5cwPDhw1GvXj38888/OHfuHKpWrVrWpRMpeX0ybVBQEB48eAAAmDx5MjZt2oS2bdvC29sbn3/+OUJDQ5UCjCAIaNeuHY4ePaq0n+h9xzkvJDlvPm9IEAScPXsWM2bMwNOnT3Hq1CnY2toCeLVk9M8//8SyZcvg4OCAgwcPKl2DqCy9/j308fHBwYMHERkZifDwcJw8eRLt27dH+/btAQDPnz/Hjz/+iE2bNsHR0RH9+vXDsmXL0LFjR6xduxYA57iQ9mB4IUl5c/VFVlYW9PX1kZubKwaYZ8+e4fTp07C2tsb58+cxa9Ys1K1bl7/gqVx5PbhMnDgR27Ztw9GjRyGTydC0aVMAwN69e/HJJ5+IbRMTE3H69GksWrQIurq6cHZ2xg8//JDvekTvO4YXkozXg8uCBQtw8+ZN6Onp4ZNPPoGXlxdyc3Nx7tw5TJ8+HS9evMDx48dha2uLBw8eiMNFDC5UHrweNBYuXIjZs2fj/v374oMUf/75ZwwZMgSjR4/G0qVLYWhomO/8Z8+ewcrKCgC/16R9+G2ncuv1XC0IghhcevfujV27dqFixYqoWLEiPv30UwQFBUFHRwetW7fGkiVLULFiRdSrVw9JSUlicOGqIioPXg8ukyZNwuzZs2FiYoJ169aJbT777DMEBARg3bp1WLZsmdL/F3Jzc8XHAuRdj99r0jZ6ZV0AUUFe/wV/5MgRdOrUCTKZDAsWLEB0dDSOHj0Ke3t7LFmyBIIgYNiwYUhKSsKECRPQqlUrzJs3D3/++SfMzc3Fa7JLncqD14eKduzYgT/++APR0dH46quvkJaWJq4a8vb2Rm5uLkaPHg0dHR1Mnz4dMpmswOcbEWkbhhcqd14PLhMmTEBAQAAePXoEU1NTZGRkYNasWbC3t8fKlSvx7bffIjg4GGFhYZg4cSJMTU0xbNgwtGvXDu3atQPALnUqf+7cuYM1a9bg0qVLaNSoEerXr4/U1FTMmjULAMQAM3LkSMhkMowePRpJSUnw9/cvy7KJyg2GFypXXg8uX331FX7++WdERESIq4dGjRoFuVyO8PBwrF+/Ht9//z169eolnuPt7Q17e3t06dJFvCaDC5U3H3zwAZKSkmBqaorc3FxUqFAB/fv3B4B8AWbEiBFITk5GZGRkmdVLVN4wvFC5khdCpk2bhqCgIISFhaF27doAXk3YjY+PR+PGjXHixAlUqFAB3bt3BwCYmppi4sSJ6Nmzp9jjQlSemZqaAvg3XFtYWGDAgAEAXgUYmUyGlStXAoDS3XW5qoiIE3apHDp27BhWr16NQYMGicElMzMTrVu3xrZt2wAAxsbGCA8PR0hICCIiIjBp0iTo6uoqDRURSY25uTkGDBiARYsWYceOHRg6dKjScQYXole4VJrKnbi4OCxYsABXr15F37594ePjg5YtW8LMzAx79+6Fubk5kpOTMWPGDKxbtw5OTk5wdXXF/v37AfAXPElfUlISNm/ejDt37iitQiKiVxheqFxSKBRYuHAhLly4gJiYGDRp0gQhISHiM1+AV8NI169fR3p6Opo3bw6Ak3Pp/ZGWliY+QJSBnEgZf8tTuWRnZ4dZs2ahZcuWMDIyQosWLcTgkvfEXV1dXTRo0EAMLrzfBb1PGFyICscJu1Ru2dnZYebMmcjNzcVvv/0GQ0NDTJs2DXp6evkeEwDwfhf0fuL3mig/DhtRuZc3hBQREYFevXph2rRpZV0SERGVIfaxU7mXN4TUtGlTfP/99zh06FBZl0RERGWIPS8kGY8ePUJoaCg+//zzsi6FiIjKEMMLSRInMRIRaS8OG5EkMbgQEWkvhhciIiKSFIYXIiIikhSGFyIiIpIUhhciIiKSFIYXIiIikhSGFyIiIpIUhhciAgD4+fmhUaNG4uuhQ4fCy8ur1OuIiYmBTCbD5cuXC21TvXp1rFy5UuVrBgYGokKFCmrXJpPJsH//frWvQ0TqYXghKseGDh0KmUwGmUwGfX191KhRA1OmTEFKSkqJv/eqVasQGBioUltVAgcRkabwqdJE5VyXLl2wZcsWZGVl4Y8//sCIESOQkpKCgICAfG2zsrKgr6+vkfe1sLDQyHWIiDSNPS9E5ZxcLoednR0cHR0xcOBADBo0SBy6yBvq+fHHH1GjRg3I5XIIgoDExER8+eWXsLGxgbm5Odq3b48rV64oXXfx4sWwtbWFmZkZvL29kZ6ernT8zWGj3NxcLFmyBB988AHkcjmqVq2KhQsXAgCcnJwAAG5ubpDJZHB3dxfP27JlC5ydnWFoaIi6deti/fr1Su9z4cIFuLm5wdDQEE2bNkVkZGSRf0bLly+Hq6srTExM4OjoiLFjxyI5OTlfu/3796N27dowNDREx44dERsbq3T8wIEDaNKkCQwNDVGjRg3MmzcP2dnZRa6HiEoWwwuRxBgZGSErK0t8fefOHezevRt79+4Vh226desGhUKBw4cPIyIiAo0bN0aHDh3w/PlzAMDu3bsxd+5cLFy4EOHh4bC3t88XKt40Y8YMLFmyBLNnz8aNGzewY8cO2NraAngVQADg+PHjiIuLw759+wAAmzZtwqxZs7Bw4ULcvHkTixYtwuzZsxEUFAQASElJQffu3VGnTh1ERETAz88PU6ZMKfLPREdHB6tXr0ZUVBSCgoIQGhqKqVOnKrVJTU3FwoULERQUhD///BNJSUkYMGCAePy///0vBg8eDB8fH9y4cQMbN25EYGCgGNCIqBwRiKjcGjJkiNCrVy/x9fnz54VKlSoJ/fr1EwRBEObOnSvo6+sL8fHxYpsTJ04I5ubmQnp6utK1atasKWzcuFEQBEFo1aqVMHr0aKXjLVq0EBo2bFjgeyclJQlyuVzYtGlTgXVGR0cLAITIyEil/Y6OjsKOHTuU9s2fP19o1aqVIAiCsHHjRsHS0lJISUkRjwcEBBR4rddVq1ZNWLFiRaHHd+/eLVSqVEl8vWXLFgGAEBYWJu67efOmAEA4f/68IAiC8PHHHwuLFi1Sus7WrVsFe3t78TUAITg4uND3JaLSwTkvROXcwYMHYWpqiuzsbGRlZaFXr15Ys2aNeLxatWqwtrYWX0dERCA5ORmVKlVSuk5aWhru3r0LALh58yZGjx6tdLxVq1Y4efJkgTXcvHkTGRkZ6NChg8p1P336FLGxsfD29sbIkSPF/dnZ2eJ8mps3b6Jhw4YwNjZWqqOoTp48iUWLFuHGjRtISkpCdnY20tPTkZKSAhMTEwCAnp4emjZtKp5Tt25dVKhQATdv3kTz5s0RERGBixcvKvW05OTkID09HampqUo1ElHZYnghKufatWuHgIAA6Ovrw8HBId+E3Ly/nPPk5ubC3t4ep06dynet4i4XNjIyKvI5ubm5AF4NHbVo0ULpmK6uLgBAEIRi1fO6+/fvo2vXrhg9ejTmz58PS0tLnDlzBt7e3krDa0DBTyPP25ebm4t58+ahd+/e+doYGhqqXScRaQ7DC1E5Z2Jigg8++EDl9o0bN4ZCoYCenh6qV69eYBtnZ2eEhYXhiy++EPeFhYUVes1atWrByMgIJ06cwIgRI/IdNzAwAPCqpyKPra0tKleujHv37mHQoEEFXrdevXrYunUr0tLSxID0tjoKEh4ejuzsbCxbtgw6Oq+m8e3evTtfu+zsbISHh6N58+YAgFu3buHFixeoW7cugFc/t1u3bhXpZ01EZYPhheg94+HhgVatWsHLywtLlixBnTp18PjxYxw+fBheXl5o2rQpJk6ciCFDhqBp06b46KOPsH37dly/fh01atQo8JqGhoaYNm0apk6dCgMDA3z44Yd4+vQprl+/Dm9vb9jY2MDIyAhHjhxBlSpVYGhoCAsLC/j5+cHHxwfm5ubw9PRERkYGwsPDkZCQgEmTJmHgwIGYNWsWvL298Z///AcxMTH47rvvivR5a9asiezsbKxZswY9evTAn3/+iQ0bNuRrp6+vjwkTJmD16tXQ19fH+PHj0bJlSzHMzJkzB927d4ejoyP69u0LHR0dXL16FdeuXcOCBQuK/j8EEZUYrjYies/IZDIcPnwYbdq0wfDhw1G7dm0MGDAAMTEx4uqg/v37Y86cOZg2bRqaNGmC+/fvY8yYMW+97uzZszF58mTMmTMHzs7O6N+/P+Lj4wG8mk+yevVqbNy4EQ4ODujVqxcAYMSIEfjhhx8QGBgIV1dXtG3bFoGBgeLSalNTUxw4cAA3btyAm5sbZs2ahSVLlhTp8zZq1AjLly/HkiVL4OLigu3bt8Pf3z9fO2NjY0ybNg0DBw5Eq1atYGRkhJ07d4rHO3fujIMHD+LYsWNo1qwZWrZsieXLl6NatWpFqoeISp5M0MSgMxEREVEpYc8LERERSQrDCxEREUkKwwsRERFJCsMLERERSQrDCxEREUkKwwsRERFJCsMLERERSQrDCxEREUkKwwsRERFJCsMLERERSQrDCxEREUnK/wBf2AIsjzbQaAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = plot_confusion_matrix(cm = confusion_matrix(df['target'], \n",
    "                                                       df['pred1_classes']), \n",
    "                                 classes = ['False (0)', 'True (1)'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = plot_confusion_matrix(cm = confusion_matrix(df['target'], \n",
    "                                                       df['pred2_classes']), \n",
    "                                 classes = ['False (0)', 'True (1)'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = plot_confusion_matrix(cm = confusion_matrix(df['target'], \n",
    "                                                       df['pred3_classes']), \n",
    "                                 classes = ['False (0)', 'True (1)'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dCrrT_WMVtSc"
   },
   "source": [
    "Давайте определимся с целями нашего предсказания:\n",
    "    \n",
    "* **Вариант 1**: хотим выдать кредит максимальному числу людей среди тех, кто мог бы его вернуть. При этом не хотим много ошибаться (общее число ошибок не более 35%).\n",
    "  \n",
    "1) Мы не хотим, чтобы алгоритм много ошибался: accuracy $\\geq$ 0.65.\n",
    "\n",
    "2) Кроме того полнота должна быть как можно больше (число в левом нижнем квадрате матрицы ошибок минимально).\n",
    "\n",
    "**Задание 5. (0.5 балла)** Для каждого алгоритма найдите такой порог принятия решения, чтобы выполнялись перечисленные выше условия. Какой максимальной полноты можно добиться у каждой из моделей при условии, что accuracy $\\geq$ 0.65?\n",
    "\n",
    "**Комментарий:** порог можно искать в цикле с небольшим шагом."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NWQplGmPVtSc"
   },
   "source": [
    "# pred1_probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "thresholds = []\n",
    "recalls = []\n",
    "accuracies = []\n",
    "for threshold in np.arange(0.1, 1, 0.01):\n",
    "    y_pred = np.where(df.pred1_probs >= threshold, 1, 0)\n",
    "    acc = accuracy_score(df['target'], y_pred)\n",
    "    rec = recall_score(df['target'], y_pred)\n",
    "    if acc >= 0.65:\n",
    "        thresholds.append(threshold)\n",
    "        recalls.append(rec)\n",
    "        accuracies.append(acc)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.36</th>\n",
       "      <th>0.37</th>\n",
       "      <th>0.38</th>\n",
       "      <th>0.39</th>\n",
       "      <th>0.40</th>\n",
       "      <th>0.41</th>\n",
       "      <th>0.42</th>\n",
       "      <th>0.43</th>\n",
       "      <th>0.44</th>\n",
       "      <th>0.45</th>\n",
       "      <th>0.46</th>\n",
       "      <th>0.47</th>\n",
       "      <th>0.48</th>\n",
       "      <th>0.49</th>\n",
       "      <th>0.50</th>\n",
       "      <th>0.51</th>\n",
       "      <th>0.52</th>\n",
       "      <th>0.53</th>\n",
       "      <th>0.54</th>\n",
       "      <th>0.55</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>recall</th>\n",
       "      <td>0.742671</td>\n",
       "      <td>0.729642</td>\n",
       "      <td>0.703583</td>\n",
       "      <td>0.680782</td>\n",
       "      <td>0.657980</td>\n",
       "      <td>0.635179</td>\n",
       "      <td>0.605863</td>\n",
       "      <td>0.570033</td>\n",
       "      <td>0.547231</td>\n",
       "      <td>0.524430</td>\n",
       "      <td>0.501629</td>\n",
       "      <td>0.472313</td>\n",
       "      <td>0.459283</td>\n",
       "      <td>0.446254</td>\n",
       "      <td>0.436482</td>\n",
       "      <td>0.426710</td>\n",
       "      <td>0.407166</td>\n",
       "      <td>0.390879</td>\n",
       "      <td>0.374593</td>\n",
       "      <td>0.348534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>acuuracy</th>\n",
       "      <td>0.651669</td>\n",
       "      <td>0.654572</td>\n",
       "      <td>0.651669</td>\n",
       "      <td>0.658926</td>\n",
       "      <td>0.667634</td>\n",
       "      <td>0.664731</td>\n",
       "      <td>0.667634</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.666183</td>\n",
       "      <td>0.664731</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.664731</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.669086</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.653120</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              0.36      0.37      0.38      0.39      0.40      0.41  \\\n",
       "recall    0.742671  0.729642  0.703583  0.680782  0.657980  0.635179   \n",
       "acuuracy  0.651669  0.654572  0.651669  0.658926  0.667634  0.664731   \n",
       "\n",
       "              0.42      0.43      0.44      0.45      0.46      0.47  \\\n",
       "recall    0.605863  0.570033  0.547231  0.524430  0.501629  0.472313   \n",
       "acuuracy  0.667634  0.663280  0.666183  0.664731  0.663280  0.661829   \n",
       "\n",
       "              0.48      0.49      0.50      0.51      0.52      0.53  \\\n",
       "recall    0.459283  0.446254  0.436482  0.426710  0.407166  0.390879   \n",
       "acuuracy  0.661829  0.664731  0.661829  0.669086  0.661829  0.663280   \n",
       "\n",
       "              0.54      0.55  \n",
       "recall    0.374593  0.348534  \n",
       "acuuracy  0.661829  0.653120  "
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data = [recalls, accuracies], columns = thresholds, index = ['recall', 'acuuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "макс полнота: 0.742671009771987\n"
     ]
    }
   ],
   "source": [
    "print('макс полнота:', max(recalls))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pred2_probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "thresholds = []\n",
    "recalls = []\n",
    "accuracies = []\n",
    "for threshold in np.arange(0.1, 1, 0.01):\n",
    "    y_pred = np.where(df.pred2_probs >= threshold, 1, 0)\n",
    "    acc = accuracy_score(df['target'], y_pred)\n",
    "    rec = recall_score(df['target'], y_pred)\n",
    "    if acc >= 0.65:\n",
    "        thresholds.append(threshold)\n",
    "        recalls.append(rec)\n",
    "        accuracies.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.27</th>\n",
       "      <th>0.28</th>\n",
       "      <th>0.29</th>\n",
       "      <th>0.30</th>\n",
       "      <th>0.31</th>\n",
       "      <th>0.32</th>\n",
       "      <th>0.33</th>\n",
       "      <th>0.34</th>\n",
       "      <th>0.35</th>\n",
       "      <th>0.36</th>\n",
       "      <th>...</th>\n",
       "      <th>0.66</th>\n",
       "      <th>0.67</th>\n",
       "      <th>0.68</th>\n",
       "      <th>0.69</th>\n",
       "      <th>0.70</th>\n",
       "      <th>0.71</th>\n",
       "      <th>0.72</th>\n",
       "      <th>0.73</th>\n",
       "      <th>0.74</th>\n",
       "      <th>0.75</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>recall</th>\n",
       "      <td>0.837134</td>\n",
       "      <td>0.837134</td>\n",
       "      <td>0.837134</td>\n",
       "      <td>0.837134</td>\n",
       "      <td>0.837134</td>\n",
       "      <td>0.820847</td>\n",
       "      <td>0.814332</td>\n",
       "      <td>0.814332</td>\n",
       "      <td>0.814332</td>\n",
       "      <td>0.814332</td>\n",
       "      <td>...</td>\n",
       "      <td>0.319218</td>\n",
       "      <td>0.319218</td>\n",
       "      <td>0.319218</td>\n",
       "      <td>0.319218</td>\n",
       "      <td>0.296417</td>\n",
       "      <td>0.296417</td>\n",
       "      <td>0.296417</td>\n",
       "      <td>0.267101</td>\n",
       "      <td>0.267101</td>\n",
       "      <td>0.267101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>acuuracy</th>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.685051</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>...</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.656023</td>\n",
       "      <td>0.656023</td>\n",
       "      <td>0.656023</td>\n",
       "      <td>0.650218</td>\n",
       "      <td>0.650218</td>\n",
       "      <td>0.650218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              0.27      0.28      0.29      0.30      0.31      0.32  \\\n",
       "recall    0.837134  0.837134  0.837134  0.837134  0.837134  0.820847   \n",
       "acuuracy  0.674891  0.674891  0.674891  0.674891  0.674891  0.685051   \n",
       "\n",
       "              0.33      0.34      0.35      0.36  ...      0.66      0.67  \\\n",
       "recall    0.814332  0.814332  0.814332  0.814332  ...  0.319218  0.319218   \n",
       "acuuracy  0.682148  0.682148  0.682148  0.682148  ...  0.663280  0.663280   \n",
       "\n",
       "              0.68      0.69      0.70      0.71      0.72      0.73  \\\n",
       "recall    0.319218  0.319218  0.296417  0.296417  0.296417  0.267101   \n",
       "acuuracy  0.663280  0.663280  0.656023  0.656023  0.656023  0.650218   \n",
       "\n",
       "              0.74      0.75  \n",
       "recall    0.267101  0.267101  \n",
       "acuuracy  0.650218  0.650218  \n",
       "\n",
       "[2 rows x 49 columns]"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data = [recalls, accuracies], columns = thresholds, index = ['recall', 'acuuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "макс полнота: 0.8371335504885994\n"
     ]
    }
   ],
   "source": [
    "print('макс полнота:', max(recalls))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pred3_probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "thresholds = []\n",
    "recalls = []\n",
    "accuracies = []\n",
    "for threshold in np.arange(0.1, 1, 0.01):\n",
    "    y_pred = np.where(df.pred3_probs >= threshold, 1, 0)\n",
    "    acc = accuracy_score(df['target'], y_pred)\n",
    "    rec = recall_score(df['target'], y_pred)\n",
    "    if acc >= 0.65:\n",
    "        thresholds.append(threshold)\n",
    "        recalls.append(rec)\n",
    "        accuracies.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>recall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>acuuracy</th>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: [recall, acuuracy]"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data = [recalls, accuracies], columns = thresholds, index = ['recall', 'acuuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "max() arg is an empty sequence",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[188], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mмакс полнота:\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;28;43mmax\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mrecalls\u001b[49m\u001b[43m)\u001b[49m)\n",
      "\u001b[0;31mValueError\u001b[0m: max() arg is an empty sequence"
     ]
    }
   ],
   "source": [
    "print('макс полнота:', max(recalls))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На третьем классификаторе не получилось найти такой порог, при котором acc не менее 0,65"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6W5KT0yvVtSd"
   },
   "source": [
    "**Задание 6. (0.5 балла)** Визуализируйте матрицу ошибок для каждого из трех алгоритмов с подобранным порогом."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_1 = np.where(df.pred1_probs >= 0.36, 1, 0)\n",
    "y_pred_2 = np.where(df.pred2_probs >= 0.27, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = plot_confusion_matrix(cm = confusion_matrix(df['target'], y_pred_1),\n",
    "                             classes = ['0', '1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {
    "id": "tyKYN6FWVtSd"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = plot_confusion_matrix(cm = confusion_matrix(df['target'], y_pred_2),\n",
    "                             classes = ['0', '1'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7Ai40oigVtSd"
   },
   "source": [
    "**Выводы:** здесь напишите, какая модель лучше всего справилась с поставленной задачей.\n",
    "\n",
    "Поскольку нашей целью было получиьт как можно большую полноту, то вторая модель справилась с этим лучше:\n",
    "\n",
    "макс полнота 1 модели: 0.742671009771987\n",
    "\n",
    "макс полнота 2 модели: 0.8371335504885994\n",
    "\n",
    "+ число в левом нижнем квадрате материцы ошибок меньше у второй модели"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "olnCxOvSVtSe"
   },
   "source": [
    "Наша цель может звучать и по-другому:\n",
    "    \n",
    "* **Вариант 2**: среди тех, кому модель выдает кредит, должно быть меньше всего ошибок (мало людей, кто его на самом деле не вернет - на них будем терять деньги).\n",
    "    При этом не хотим много ошибаться (общее число ошибок не более 35%).\n",
    "  \n",
    "1) Мы не хотим, чтобы алгоритм много ошибался: accuracy $\\geq$ 0.65.\n",
    "\n",
    "2) Кроме того точность должна быть как можно больше (число в правом верхнем квадрате матрицы ошибок минимально).\n",
    "\n",
    "**Задание 7. (0.5 балла)** Для каждого алгоритма найдите порог принятия решения, чтобы выполнялись перечисленные выше условия. Какой максимальной точности можно добиться у каждой из моделей при условии, что accuracy $\\geq$ 0.65?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pred1_probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "thresholds = []\n",
    "precisions = []\n",
    "accuracies = []\n",
    "for threshold in np.arange(0.1, 1, 0.01):\n",
    "    y_pred_2 = np.where(df.pred1_probs >= threshold, 1, 0)\n",
    "    acc = accuracy_score(df['target'], y_pred_2)\n",
    "    pre = precision_score(df['target'], y_pred_2)\n",
    "    if acc >= 0.65:\n",
    "        thresholds.append(threshold)\n",
    "        precisions.append(pre)\n",
    "        accuracies.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.36</th>\n",
       "      <th>0.37</th>\n",
       "      <th>0.38</th>\n",
       "      <th>0.39</th>\n",
       "      <th>0.40</th>\n",
       "      <th>0.41</th>\n",
       "      <th>0.42</th>\n",
       "      <th>0.43</th>\n",
       "      <th>0.44</th>\n",
       "      <th>0.45</th>\n",
       "      <th>0.46</th>\n",
       "      <th>0.47</th>\n",
       "      <th>0.48</th>\n",
       "      <th>0.49</th>\n",
       "      <th>0.50</th>\n",
       "      <th>0.51</th>\n",
       "      <th>0.52</th>\n",
       "      <th>0.53</th>\n",
       "      <th>0.54</th>\n",
       "      <th>0.55</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>precision</th>\n",
       "      <td>0.586118</td>\n",
       "      <td>0.591029</td>\n",
       "      <td>0.591781</td>\n",
       "      <td>0.604046</td>\n",
       "      <td>0.619632</td>\n",
       "      <td>0.621019</td>\n",
       "      <td>0.632653</td>\n",
       "      <td>0.636364</td>\n",
       "      <td>0.648649</td>\n",
       "      <td>0.654472</td>\n",
       "      <td>0.660944</td>\n",
       "      <td>0.671296</td>\n",
       "      <td>0.677885</td>\n",
       "      <td>0.691919</td>\n",
       "      <td>0.690722</td>\n",
       "      <td>0.715847</td>\n",
       "      <td>0.710227</td>\n",
       "      <td>0.727273</td>\n",
       "      <td>0.737179</td>\n",
       "      <td>0.732877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>accuracy</th>\n",
       "      <td>0.651669</td>\n",
       "      <td>0.654572</td>\n",
       "      <td>0.651669</td>\n",
       "      <td>0.658926</td>\n",
       "      <td>0.667634</td>\n",
       "      <td>0.664731</td>\n",
       "      <td>0.667634</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.666183</td>\n",
       "      <td>0.664731</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.664731</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.669086</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.653120</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               0.36      0.37      0.38      0.39      0.40      0.41  \\\n",
       "precision  0.586118  0.591029  0.591781  0.604046  0.619632  0.621019   \n",
       "accuracy   0.651669  0.654572  0.651669  0.658926  0.667634  0.664731   \n",
       "\n",
       "               0.42      0.43      0.44      0.45      0.46      0.47  \\\n",
       "precision  0.632653  0.636364  0.648649  0.654472  0.660944  0.671296   \n",
       "accuracy   0.667634  0.663280  0.666183  0.664731  0.663280  0.661829   \n",
       "\n",
       "               0.48      0.49      0.50      0.51      0.52      0.53  \\\n",
       "precision  0.677885  0.691919  0.690722  0.715847  0.710227  0.727273   \n",
       "accuracy   0.661829  0.664731  0.661829  0.669086  0.661829  0.663280   \n",
       "\n",
       "               0.54      0.55  \n",
       "precision  0.737179  0.732877  \n",
       "accuracy   0.661829  0.653120  "
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data = [precisions, accuracies], columns = thresholds, index = ['precision', 'accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "макс точность: 0.7371794871794872\n"
     ]
    }
   ],
   "source": [
    "print('макс точность:', max(precisions))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pred2_probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/Users/polinakrupica/anaconda3/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "thresholds = []\n",
    "precisions = []\n",
    "accuracies = []\n",
    "for threshold in np.arange(0.1, 1, 0.01):\n",
    "    y_pred_2 = np.where(df.pred2_probs >= threshold, 1, 0)\n",
    "    acc = accuracy_score(df['target'], y_pred_2)\n",
    "    pre = precision_score(df['target'], y_pred_2)\n",
    "    if acc >= 0.65:\n",
    "        thresholds.append(threshold)\n",
    "        precisions.append(pre)\n",
    "        accuracies.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.27</th>\n",
       "      <th>0.28</th>\n",
       "      <th>0.29</th>\n",
       "      <th>0.30</th>\n",
       "      <th>0.31</th>\n",
       "      <th>0.32</th>\n",
       "      <th>0.33</th>\n",
       "      <th>0.34</th>\n",
       "      <th>0.35</th>\n",
       "      <th>0.36</th>\n",
       "      <th>...</th>\n",
       "      <th>0.66</th>\n",
       "      <th>0.67</th>\n",
       "      <th>0.68</th>\n",
       "      <th>0.69</th>\n",
       "      <th>0.70</th>\n",
       "      <th>0.71</th>\n",
       "      <th>0.72</th>\n",
       "      <th>0.73</th>\n",
       "      <th>0.74</th>\n",
       "      <th>0.75</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>precision</th>\n",
       "      <td>0.596288</td>\n",
       "      <td>0.596288</td>\n",
       "      <td>0.596288</td>\n",
       "      <td>0.596288</td>\n",
       "      <td>0.596288</td>\n",
       "      <td>0.608696</td>\n",
       "      <td>0.606796</td>\n",
       "      <td>0.606796</td>\n",
       "      <td>0.606796</td>\n",
       "      <td>0.606796</td>\n",
       "      <td>...</td>\n",
       "      <td>0.809917</td>\n",
       "      <td>0.809917</td>\n",
       "      <td>0.809917</td>\n",
       "      <td>0.809917</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0.836735</td>\n",
       "      <td>0.836735</td>\n",
       "      <td>0.836735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>accuracy</th>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.685051</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>...</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.656023</td>\n",
       "      <td>0.656023</td>\n",
       "      <td>0.656023</td>\n",
       "      <td>0.650218</td>\n",
       "      <td>0.650218</td>\n",
       "      <td>0.650218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               0.27      0.28      0.29      0.30      0.31      0.32  \\\n",
       "precision  0.596288  0.596288  0.596288  0.596288  0.596288  0.608696   \n",
       "accuracy   0.674891  0.674891  0.674891  0.674891  0.674891  0.685051   \n",
       "\n",
       "               0.33      0.34      0.35      0.36  ...      0.66      0.67  \\\n",
       "precision  0.606796  0.606796  0.606796  0.606796  ...  0.809917  0.809917   \n",
       "accuracy   0.682148  0.682148  0.682148  0.682148  ...  0.663280  0.663280   \n",
       "\n",
       "               0.68      0.69      0.70      0.71      0.72      0.73  \\\n",
       "precision  0.809917  0.809917  0.812500  0.812500  0.812500  0.836735   \n",
       "accuracy   0.663280  0.663280  0.656023  0.656023  0.656023  0.650218   \n",
       "\n",
       "               0.74      0.75  \n",
       "precision  0.836735  0.836735  \n",
       "accuracy   0.650218  0.650218  \n",
       "\n",
       "[2 rows x 49 columns]"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data = [precisions, accuracies], columns = thresholds, index = ['precision', 'accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "макс точность: 0.8367346938775511\n"
     ]
    }
   ],
   "source": [
    "print('макс точность:', max(precisions))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pred3_probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "thresholds = []\n",
    "precisions = []\n",
    "accuracies = []\n",
    "for threshold in np.arange(0.1, 1, 0.01):\n",
    "    y_pred_2 = np.where(df.pred3_probs >= threshold, 1, 0)\n",
    "    acc = accuracy_score(df['target'], y_pred_2)\n",
    "    pre = precision_score(df['target'], y_pred_2)\n",
    "    if acc >= 0.65:\n",
    "        thresholds.append(threshold)\n",
    "        precisions.append(pre)\n",
    "        accuracies.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>precision</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>accuracy</th>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: [precision, accuracy]"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data = [precisions, accuracies], columns = thresholds, index = ['precision', 'accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "max() arg is an empty sequence",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[223], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mмакс точность:\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;28;43mmax\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprecisions\u001b[49m\u001b[43m)\u001b[49m)\n",
      "\u001b[0;31mValueError\u001b[0m: max() arg is an empty sequence"
     ]
    }
   ],
   "source": [
    "print('макс точность:', max(precisions))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "n_SZDM1fVtSf"
   },
   "source": [
    "Очевидно что в третьей модели все еще нет такого порога, что аккьюраси больше 0,65"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 8.** Нарисуйте матрицы ошибок для каждого из алгоритмов с найденными значениями порога. Какая модель лучше всех справилась с этой задачей?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_1 = np.where(df.pred1_probs >= 0.54, 1, 0)\n",
    "y_pred_2 = np.where(df.pred2_probs >= 0.75, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = plot_confusion_matrix(cm = confusion_matrix(df['target'], y_pred_1),\n",
    "                             classes = ['0', '1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = plot_confusion_matrix(cm = confusion_matrix(df['target'], y_pred_2),\n",
    "                             classes = ['0', '1'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вторая модель снова справилась лучше - число в правом верхнем квадрате минимально, значение precision больше, чем в первой модели."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PP0FnVc_VtSf"
   },
   "source": [
    "Также (**Вариант 3**) можно потребовать, чтобы и точность, и полнота были высокими, то есть обе ошибки в матрице ошибок были маленькие. Как вариант - можно максимизировать F1-score (среднее гармоническое между точностью и полнотой).\n",
    "\n",
    "**Задание 9. (0.5 балла)** Найдите пороги для достижения максимального F1-score для каждой из трех моделей и нарисуйте матрицы ошибок. Какая модель решает поставленную задачу лучше остальных?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "i54x-w8bVtSf"
   },
   "source": [
    "# pred1_probs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [],
   "source": [
    "thresholds = []\n",
    "f1s = []\n",
    "accuracies = []\n",
    "for threshold in np.arange(0.1, 1, 0.01):\n",
    "    y_pred_2 = np.where(df.pred1_probs >= threshold, 1, 0)\n",
    "    acc = accuracy_score(df['target'], y_pred_2)\n",
    "    f1 = f1_score(df['target'], y_pred_2)\n",
    "    if acc >= 0.65:\n",
    "        thresholds.append(threshold)\n",
    "        f1s.append(f1)\n",
    "        accuracies.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.36</th>\n",
       "      <th>0.37</th>\n",
       "      <th>0.38</th>\n",
       "      <th>0.39</th>\n",
       "      <th>0.40</th>\n",
       "      <th>0.41</th>\n",
       "      <th>0.42</th>\n",
       "      <th>0.43</th>\n",
       "      <th>0.44</th>\n",
       "      <th>0.45</th>\n",
       "      <th>0.46</th>\n",
       "      <th>0.47</th>\n",
       "      <th>0.48</th>\n",
       "      <th>0.49</th>\n",
       "      <th>0.50</th>\n",
       "      <th>0.51</th>\n",
       "      <th>0.52</th>\n",
       "      <th>0.53</th>\n",
       "      <th>0.54</th>\n",
       "      <th>0.55</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>f1</th>\n",
       "      <td>0.655172</td>\n",
       "      <td>0.653061</td>\n",
       "      <td>0.642857</td>\n",
       "      <td>0.640123</td>\n",
       "      <td>0.638231</td>\n",
       "      <td>0.628019</td>\n",
       "      <td>0.618968</td>\n",
       "      <td>0.601375</td>\n",
       "      <td>0.593640</td>\n",
       "      <td>0.582278</td>\n",
       "      <td>0.57037</td>\n",
       "      <td>0.554493</td>\n",
       "      <td>0.547573</td>\n",
       "      <td>0.542574</td>\n",
       "      <td>0.534930</td>\n",
       "      <td>0.534694</td>\n",
       "      <td>0.517598</td>\n",
       "      <td>0.508475</td>\n",
       "      <td>0.496760</td>\n",
       "      <td>0.472406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>accuracy</th>\n",
       "      <td>0.651669</td>\n",
       "      <td>0.654572</td>\n",
       "      <td>0.651669</td>\n",
       "      <td>0.658926</td>\n",
       "      <td>0.667634</td>\n",
       "      <td>0.664731</td>\n",
       "      <td>0.667634</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.666183</td>\n",
       "      <td>0.664731</td>\n",
       "      <td>0.66328</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.664731</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.669086</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.661829</td>\n",
       "      <td>0.653120</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              0.36      0.37      0.38      0.39      0.40      0.41  \\\n",
       "f1        0.655172  0.653061  0.642857  0.640123  0.638231  0.628019   \n",
       "accuracy  0.651669  0.654572  0.651669  0.658926  0.667634  0.664731   \n",
       "\n",
       "              0.42      0.43      0.44      0.45     0.46      0.47      0.48  \\\n",
       "f1        0.618968  0.601375  0.593640  0.582278  0.57037  0.554493  0.547573   \n",
       "accuracy  0.667634  0.663280  0.666183  0.664731  0.66328  0.661829  0.661829   \n",
       "\n",
       "              0.49      0.50      0.51      0.52      0.53      0.54      0.55  \n",
       "f1        0.542574  0.534930  0.534694  0.517598  0.508475  0.496760  0.472406  \n",
       "accuracy  0.664731  0.661829  0.669086  0.661829  0.663280  0.661829  0.653120  "
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data = [f1s, accuracies], columns = thresholds, index = ['f1', 'accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "макс f1: 0.6551724137931035\n"
     ]
    }
   ],
   "source": [
    "print('макс f1:', max(f1s))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pred2_probs\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [],
   "source": [
    "thresholds = []\n",
    "f1s = []\n",
    "accuracies = []\n",
    "for threshold in np.arange(0.1, 1, 0.01):\n",
    "    y_pred_2 = np.where(df.pred2_probs >= threshold, 1, 0)\n",
    "    acc = accuracy_score(df['target'], y_pred_2)\n",
    "    f1 = f1_score(df['target'], y_pred_2)\n",
    "    if acc >= 0.65:\n",
    "        thresholds.append(threshold)\n",
    "        f1s.append(f1)\n",
    "        accuracies.append(acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.27</th>\n",
       "      <th>0.28</th>\n",
       "      <th>0.29</th>\n",
       "      <th>0.30</th>\n",
       "      <th>0.31</th>\n",
       "      <th>0.32</th>\n",
       "      <th>0.33</th>\n",
       "      <th>0.34</th>\n",
       "      <th>0.35</th>\n",
       "      <th>0.36</th>\n",
       "      <th>...</th>\n",
       "      <th>0.66</th>\n",
       "      <th>0.67</th>\n",
       "      <th>0.68</th>\n",
       "      <th>0.69</th>\n",
       "      <th>0.70</th>\n",
       "      <th>0.71</th>\n",
       "      <th>0.72</th>\n",
       "      <th>0.73</th>\n",
       "      <th>0.74</th>\n",
       "      <th>0.75</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>f1</th>\n",
       "      <td>0.696477</td>\n",
       "      <td>0.696477</td>\n",
       "      <td>0.696477</td>\n",
       "      <td>0.696477</td>\n",
       "      <td>0.696477</td>\n",
       "      <td>0.699029</td>\n",
       "      <td>0.695410</td>\n",
       "      <td>0.695410</td>\n",
       "      <td>0.695410</td>\n",
       "      <td>0.695410</td>\n",
       "      <td>...</td>\n",
       "      <td>0.457944</td>\n",
       "      <td>0.457944</td>\n",
       "      <td>0.457944</td>\n",
       "      <td>0.457944</td>\n",
       "      <td>0.434368</td>\n",
       "      <td>0.434368</td>\n",
       "      <td>0.434368</td>\n",
       "      <td>0.404938</td>\n",
       "      <td>0.404938</td>\n",
       "      <td>0.404938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>accuracy</th>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.674891</td>\n",
       "      <td>0.685051</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>0.682148</td>\n",
       "      <td>...</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.663280</td>\n",
       "      <td>0.656023</td>\n",
       "      <td>0.656023</td>\n",
       "      <td>0.656023</td>\n",
       "      <td>0.650218</td>\n",
       "      <td>0.650218</td>\n",
       "      <td>0.650218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              0.27      0.28      0.29      0.30      0.31      0.32  \\\n",
       "f1        0.696477  0.696477  0.696477  0.696477  0.696477  0.699029   \n",
       "accuracy  0.674891  0.674891  0.674891  0.674891  0.674891  0.685051   \n",
       "\n",
       "              0.33      0.34      0.35      0.36  ...      0.66      0.67  \\\n",
       "f1        0.695410  0.695410  0.695410  0.695410  ...  0.457944  0.457944   \n",
       "accuracy  0.682148  0.682148  0.682148  0.682148  ...  0.663280  0.663280   \n",
       "\n",
       "              0.68      0.69      0.70      0.71      0.72      0.73  \\\n",
       "f1        0.457944  0.457944  0.434368  0.434368  0.434368  0.404938   \n",
       "accuracy  0.663280  0.663280  0.656023  0.656023  0.656023  0.650218   \n",
       "\n",
       "              0.74      0.75  \n",
       "f1        0.404938  0.404938  \n",
       "accuracy  0.650218  0.650218  \n",
       "\n",
       "[2 rows x 49 columns]"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data = [f1s, accuracies], columns = thresholds, index = ['f1', 'accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "макс f1: 0.6990291262135923\n"
     ]
    }
   ],
   "source": [
    "print('макс f1:', max(f1s))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Не удивительно, что вторая модель решает задачу лучше, потому что она решала задачу по отдельности для точности и полноты лучше, а f1 это просто комбинация точности и полноты."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_3XarXpDVtSg"
   },
   "source": [
    "#### Кстати\n",
    "\n",
    "В python есть удобная функция classification_report, которая выводит значения нескольких метрик."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 208
    },
    "executionInfo": {
     "elapsed": 229,
     "status": "error",
     "timestamp": 1697441409754,
     "user": {
      "displayName": "Sergey Korpachev",
      "userId": "09181340988160569540"
     },
     "user_tz": -180
    },
    "id": "Q8IZ16TKVtSg",
    "outputId": "7c81d128-7e87-4f2a-e809-eb98302af74c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.65      0.84      0.73       382\n",
      "           1       0.69      0.44      0.53       307\n",
      "\n",
      "    accuracy                           0.66       689\n",
      "   macro avg       0.67      0.64      0.63       689\n",
      "weighted avg       0.67      0.66      0.65       689\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "print(classification_report(df['target'], df['pred1_classes']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "a7a8yR2eVtSg"
   },
   "source": [
    "### Обучим свою модель для предсказания target.\n",
    "\n",
    "**Задание 10. (0.5 балла)** Отнормируйте признаки в задаче и обучите логистическую регрессию предсказывать target."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>target</th>\n",
       "      <th>pred1_probs</th>\n",
       "      <th>pred1_classes</th>\n",
       "      <th>pred2_probs</th>\n",
       "      <th>pred2_classes</th>\n",
       "      <th>pred3_probs</th>\n",
       "      <th>pred3_classes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>22.08</td>\n",
       "      <td>11.460</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1.585</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>100</td>\n",
       "      <td>1213</td>\n",
       "      <td>0</td>\n",
       "      <td>0.506772</td>\n",
       "      <td>1</td>\n",
       "      <td>0.610853</td>\n",
       "      <td>1</td>\n",
       "      <td>0.375494</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>22.67</td>\n",
       "      <td>7.000</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0.165</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>160</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.358519</td>\n",
       "      <td>0</td>\n",
       "      <td>0.185941</td>\n",
       "      <td>0</td>\n",
       "      <td>0.200975</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>29.58</td>\n",
       "      <td>1.750</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1.250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>280</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.358753</td>\n",
       "      <td>0</td>\n",
       "      <td>0.523009</td>\n",
       "      <td>1</td>\n",
       "      <td>0.160465</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>21.67</td>\n",
       "      <td>11.500</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.408729</td>\n",
       "      <td>0</td>\n",
       "      <td>0.185941</td>\n",
       "      <td>0</td>\n",
       "      <td>0.357771</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>20.17</td>\n",
       "      <td>8.170</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>1.960</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>60</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>0.480904</td>\n",
       "      <td>0</td>\n",
       "      <td>0.526646</td>\n",
       "      <td>1</td>\n",
       "      <td>0.260169</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>684</th>\n",
       "      <td>1</td>\n",
       "      <td>31.57</td>\n",
       "      <td>10.500</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>6.500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.776376</td>\n",
       "      <td>1</td>\n",
       "      <td>0.804659</td>\n",
       "      <td>1</td>\n",
       "      <td>0.910302</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>685</th>\n",
       "      <td>1</td>\n",
       "      <td>20.67</td>\n",
       "      <td>0.415</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0.125</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0.273138</td>\n",
       "      <td>0</td>\n",
       "      <td>0.175782</td>\n",
       "      <td>0</td>\n",
       "      <td>0.139252</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>686</th>\n",
       "      <td>0</td>\n",
       "      <td>18.83</td>\n",
       "      <td>9.540</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>0.085</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.383878</td>\n",
       "      <td>0</td>\n",
       "      <td>0.185941</td>\n",
       "      <td>0</td>\n",
       "      <td>0.272625</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>687</th>\n",
       "      <td>0</td>\n",
       "      <td>27.42</td>\n",
       "      <td>14.500</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>3.085</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0.645865</td>\n",
       "      <td>1</td>\n",
       "      <td>0.804659</td>\n",
       "      <td>1</td>\n",
       "      <td>0.682064</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>688</th>\n",
       "      <td>1</td>\n",
       "      <td>41.00</td>\n",
       "      <td>0.040</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>4</td>\n",
       "      <td>0.040</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>560</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.282730</td>\n",
       "      <td>0</td>\n",
       "      <td>0.508638</td>\n",
       "      <td>1</td>\n",
       "      <td>0.219612</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>689 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     0      1       2  3   4  5      6  7  8   9  ...  11   12    13  target  \\\n",
       "0    1  22.08  11.460  2   4  4  1.585  0  0   0  ...   2  100  1213       0   \n",
       "1    0  22.67   7.000  2   8  4  0.165  0  0   0  ...   2  160     1       0   \n",
       "2    0  29.58   1.750  1   4  4  1.250  0  0   0  ...   2  280     1       0   \n",
       "3    0  21.67  11.500  1   5  3  0.000  1  1  11  ...   2    0     1       1   \n",
       "4    1  20.17   8.170  2   6  4  1.960  1  1  14  ...   2   60   159       1   \n",
       "..  ..    ...     ... ..  .. ..    ... .. ..  ..  ...  ..  ...   ...     ...   \n",
       "684  1  31.57  10.500  2  14  4  6.500  1  0   0  ...   2    0     1       1   \n",
       "685  1  20.67   0.415  2   8  4  0.125  0  0   0  ...   2    0    45       0   \n",
       "686  0  18.83   9.540  2   6  4  0.085  1  0   0  ...   2  100     1       1   \n",
       "687  0  27.42  14.500  2  14  8  3.085  1  1   1  ...   2  120    12       1   \n",
       "688  1  41.00   0.040  2  10  4  0.040  0  1   1  ...   1  560     1       1   \n",
       "\n",
       "     pred1_probs  pred1_classes  pred2_probs  pred2_classes  pred3_probs  \\\n",
       "0       0.506772              1     0.610853              1     0.375494   \n",
       "1       0.358519              0     0.185941              0     0.200975   \n",
       "2       0.358753              0     0.523009              1     0.160465   \n",
       "3       0.408729              0     0.185941              0     0.357771   \n",
       "4       0.480904              0     0.526646              1     0.260169   \n",
       "..           ...            ...          ...            ...          ...   \n",
       "684     0.776376              1     0.804659              1     0.910302   \n",
       "685     0.273138              0     0.175782              0     0.139252   \n",
       "686     0.383878              0     0.185941              0     0.272625   \n",
       "687     0.645865              1     0.804659              1     0.682064   \n",
       "688     0.282730              0     0.508638              1     0.219612   \n",
       "\n",
       "     pred3_classes  \n",
       "0                0  \n",
       "1                0  \n",
       "2                0  \n",
       "3                0  \n",
       "4                0  \n",
       "..             ...  \n",
       "684              1  \n",
       "685              0  \n",
       "686              0  \n",
       "687              1  \n",
       "688              0  \n",
       "\n",
       "[689 rows x 21 columns]"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {
    "id": "2wh9wuaZVtSh"
   },
   "outputs": [],
   "source": [
    "X = df.drop('target', axis=1)\n",
    "y = df['target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_1, X_test_1, y_train, y_test = train_test_split(X, y, test_size=0.3) \n",
    "\n",
    "sc = StandardScaler()\n",
    "X_train = sc.fit_transform(X_train_1)\n",
    "X_test = sc.transform(X_test_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.8672199170124482, 0.8792270531400966)"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "pred_train = model.predict(X_train)\n",
    "pred_test = model.predict(X_test)\n",
    "accuracy_score(y_train, pred_train), accuracy_score(y_test, pred_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rJfw6vHpVtSi"
   },
   "source": [
    "**Задание 11. (0.5 балла)** Подберите порог для перевода предсказания в классы, чтобы максимизировать:\n",
    "    а) точность\n",
    "    б) полноту\n",
    "    в) f1-score.\n",
    "Лучше ли логистическая регрессия справилась с задачей, чем три готовые модели, предсказания которых мы анализировали выше?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {
    "id": "Wlvgxq3tVtSi"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[6.50356538e-01, 3.49643462e-01],\n",
       "       [1.39865153e-02, 9.86013485e-01],\n",
       "       [1.76234855e-01, 8.23765145e-01],\n",
       "       [6.31814894e-01, 3.68185106e-01],\n",
       "       [5.36982624e-02, 9.46301738e-01],\n",
       "       [2.96405953e-02, 9.70359405e-01],\n",
       "       [1.36893411e-01, 8.63106589e-01],\n",
       "       [9.63794310e-01, 3.62056898e-02],\n",
       "       [9.46814820e-01, 5.31851799e-02],\n",
       "       [4.18859711e-01, 5.81140289e-01],\n",
       "       [4.03763289e-01, 5.96236711e-01],\n",
       "       [9.65498323e-01, 3.45016773e-02],\n",
       "       [8.58417322e-01, 1.41582678e-01],\n",
       "       [5.35231674e-01, 4.64768326e-01],\n",
       "       [1.16923115e-02, 9.88307688e-01],\n",
       "       [1.28436487e-01, 8.71563513e-01],\n",
       "       [9.61665926e-01, 3.83340740e-02],\n",
       "       [1.36239183e-01, 8.63760817e-01],\n",
       "       [7.62255171e-01, 2.37744829e-01],\n",
       "       [1.55890818e-02, 9.84410918e-01],\n",
       "       [8.92269546e-01, 1.07730454e-01],\n",
       "       [2.12373939e-01, 7.87626061e-01],\n",
       "       [1.84070181e-02, 9.81592982e-01],\n",
       "       [9.56855411e-01, 4.31445886e-02],\n",
       "       [6.85299678e-01, 3.14700322e-01],\n",
       "       [9.02473560e-01, 9.75264397e-02],\n",
       "       [7.24187874e-01, 2.75812126e-01],\n",
       "       [9.28310821e-01, 7.16891794e-02],\n",
       "       [9.05558106e-01, 9.44418938e-02],\n",
       "       [8.85596109e-01, 1.14403891e-01],\n",
       "       [1.40167407e-02, 9.85983259e-01],\n",
       "       [8.67615177e-01, 1.32384823e-01],\n",
       "       [2.79454478e-01, 7.20545522e-01],\n",
       "       [7.19912499e-02, 9.28008750e-01],\n",
       "       [9.69472435e-01, 3.05275652e-02],\n",
       "       [7.43311267e-01, 2.56688733e-01],\n",
       "       [9.30901274e-02, 9.06909873e-01],\n",
       "       [9.18378313e-01, 8.16216869e-02],\n",
       "       [2.17306728e-02, 9.78269327e-01],\n",
       "       [9.45937436e-01, 5.40625640e-02],\n",
       "       [8.20649779e-02, 9.17935022e-01],\n",
       "       [1.70439887e-01, 8.29560113e-01],\n",
       "       [9.64400789e-01, 3.55992108e-02],\n",
       "       [9.42223666e-02, 9.05777633e-01],\n",
       "       [8.83013726e-01, 1.16986274e-01],\n",
       "       [4.79164002e-03, 9.95208360e-01],\n",
       "       [2.94652085e-01, 7.05347915e-01],\n",
       "       [9.44425876e-01, 5.55741241e-02],\n",
       "       [4.77006171e-01, 5.22993829e-01],\n",
       "       [9.46878794e-01, 5.31212055e-02],\n",
       "       [9.79479362e-01, 2.05206383e-02],\n",
       "       [9.59385557e-01, 4.06144431e-02],\n",
       "       [9.74797020e-01, 2.52029798e-02],\n",
       "       [9.89612266e-01, 1.03877345e-02],\n",
       "       [9.30471541e-01, 6.95284587e-02],\n",
       "       [1.05428358e-01, 8.94571642e-01],\n",
       "       [9.24980714e-01, 7.50192859e-02],\n",
       "       [1.00120723e-01, 8.99879277e-01],\n",
       "       [8.61275127e-01, 1.38724873e-01],\n",
       "       [9.49039277e-01, 5.09607229e-02],\n",
       "       [1.90574776e-02, 9.80942522e-01],\n",
       "       [2.03202149e-01, 7.96797851e-01],\n",
       "       [6.88437809e-02, 9.31156219e-01],\n",
       "       [9.20182893e-01, 7.98171066e-02],\n",
       "       [9.39539371e-01, 6.04606286e-02],\n",
       "       [3.00983814e-02, 9.69901619e-01],\n",
       "       [1.18900000e-01, 8.81100000e-01],\n",
       "       [1.08720869e-01, 8.91279131e-01],\n",
       "       [9.22579200e-01, 7.74208002e-02],\n",
       "       [1.22161170e-02, 9.87783883e-01],\n",
       "       [9.78091511e-01, 2.19084888e-02],\n",
       "       [8.62743046e-01, 1.37256954e-01],\n",
       "       [2.92397826e-02, 9.70760217e-01],\n",
       "       [5.07846796e-02, 9.49215320e-01],\n",
       "       [8.05693061e-01, 1.94306939e-01],\n",
       "       [8.95518404e-01, 1.04481596e-01],\n",
       "       [3.10249863e-01, 6.89750137e-01],\n",
       "       [1.15937794e-02, 9.88406221e-01],\n",
       "       [2.20324518e-01, 7.79675482e-01],\n",
       "       [9.63392901e-01, 3.66070986e-02],\n",
       "       [1.77851521e-01, 8.22148479e-01],\n",
       "       [7.29671955e-02, 9.27032804e-01],\n",
       "       [7.56417417e-01, 2.43582583e-01],\n",
       "       [1.02699394e-01, 8.97300606e-01],\n",
       "       [1.81068557e-01, 8.18931443e-01],\n",
       "       [2.69322661e-02, 9.73067734e-01],\n",
       "       [1.11912867e-02, 9.88808713e-01],\n",
       "       [3.74510450e-01, 6.25489550e-01],\n",
       "       [9.53826919e-01, 4.61730807e-02],\n",
       "       [9.08620162e-01, 9.13798379e-02],\n",
       "       [2.87534573e-01, 7.12465427e-01],\n",
       "       [8.90679683e-02, 9.10932032e-01],\n",
       "       [1.05977105e-01, 8.94022895e-01],\n",
       "       [8.01447533e-01, 1.98552467e-01],\n",
       "       [8.68037981e-01, 1.31962019e-01],\n",
       "       [9.72620868e-01, 2.73791321e-02],\n",
       "       [3.68698848e-01, 6.31301152e-01],\n",
       "       [2.22553830e-01, 7.77446170e-01],\n",
       "       [3.80861040e-01, 6.19138960e-01],\n",
       "       [1.22901515e-01, 8.77098485e-01],\n",
       "       [6.59615556e-02, 9.34038444e-01],\n",
       "       [3.38433948e-02, 9.66156605e-01],\n",
       "       [1.47787174e-02, 9.85221283e-01],\n",
       "       [9.40283497e-01, 5.97165025e-02],\n",
       "       [3.13465625e-01, 6.86534375e-01],\n",
       "       [9.16752722e-01, 8.32472779e-02],\n",
       "       [8.88330862e-01, 1.11669138e-01],\n",
       "       [4.06392433e-01, 5.93607567e-01],\n",
       "       [1.36999924e-02, 9.86300008e-01],\n",
       "       [7.02442983e-02, 9.29755702e-01],\n",
       "       [2.08348776e-02, 9.79165122e-01],\n",
       "       [7.44663401e-01, 2.55336599e-01],\n",
       "       [4.85906204e-01, 5.14093796e-01],\n",
       "       [8.36208723e-01, 1.63791277e-01],\n",
       "       [6.38378897e-02, 9.36162110e-01],\n",
       "       [9.16045273e-01, 8.39547269e-02],\n",
       "       [5.57937870e-01, 4.42062130e-01],\n",
       "       [4.28245113e-01, 5.71754887e-01],\n",
       "       [9.33190794e-01, 6.68092062e-02],\n",
       "       [4.62509491e-01, 5.37490509e-01],\n",
       "       [8.92511916e-01, 1.07488084e-01],\n",
       "       [9.07328075e-02, 9.09267193e-01],\n",
       "       [2.36012144e-02, 9.76398786e-01],\n",
       "       [3.77666854e-01, 6.22333146e-01],\n",
       "       [2.06015249e-01, 7.93984751e-01],\n",
       "       [9.88766944e-01, 1.12330557e-02],\n",
       "       [9.86275058e-01, 1.37249421e-02],\n",
       "       [9.82922783e-01, 1.70772169e-02],\n",
       "       [1.67594710e-01, 8.32405290e-01],\n",
       "       [4.28566231e-02, 9.57143377e-01],\n",
       "       [9.26881754e-01, 7.31182460e-02],\n",
       "       [9.24216049e-01, 7.57839506e-02],\n",
       "       [9.55576674e-01, 4.44233259e-02],\n",
       "       [1.47240848e-02, 9.85275915e-01],\n",
       "       [9.33040295e-01, 6.69597051e-02],\n",
       "       [6.38881789e-02, 9.36111821e-01],\n",
       "       [4.05734497e-02, 9.59426550e-01],\n",
       "       [9.72021078e-01, 2.79789223e-02],\n",
       "       [8.84012346e-01, 1.15987654e-01],\n",
       "       [9.60999877e-01, 3.90001233e-02],\n",
       "       [2.00949373e-02, 9.79905063e-01],\n",
       "       [6.18609390e-02, 9.38139061e-01],\n",
       "       [1.95488419e-01, 8.04511581e-01],\n",
       "       [9.49520418e-01, 5.04795823e-02],\n",
       "       [3.65054266e-01, 6.34945734e-01],\n",
       "       [9.45497642e-01, 5.45023583e-02],\n",
       "       [8.95269774e-01, 1.04730226e-01],\n",
       "       [3.77401789e-01, 6.22598211e-01],\n",
       "       [7.01146660e-02, 9.29885334e-01],\n",
       "       [9.77535187e-01, 2.24648131e-02],\n",
       "       [9.05262995e-01, 9.47370053e-02],\n",
       "       [9.63485831e-01, 3.65141687e-02],\n",
       "       [9.84805512e-01, 1.51944879e-02],\n",
       "       [9.18541823e-01, 8.14581773e-02],\n",
       "       [9.09138400e-01, 9.08616005e-02],\n",
       "       [9.43502300e-01, 5.64976999e-02],\n",
       "       [9.24446255e-01, 7.55537449e-02],\n",
       "       [8.97548169e-01, 1.02451831e-01],\n",
       "       [9.86422706e-02, 9.01357729e-01],\n",
       "       [9.62436843e-01, 3.75631569e-02],\n",
       "       [1.37756701e-01, 8.62243299e-01],\n",
       "       [2.98345218e-01, 7.01654782e-01],\n",
       "       [9.96903099e-01, 3.09690130e-03],\n",
       "       [8.31828031e-01, 1.68171969e-01],\n",
       "       [2.36825402e-01, 7.63174598e-01],\n",
       "       [9.60127245e-01, 3.98727553e-02],\n",
       "       [8.93765410e-01, 1.06234590e-01],\n",
       "       [2.89000193e-01, 7.10999807e-01],\n",
       "       [1.84333357e-01, 8.15666643e-01],\n",
       "       [9.61377849e-01, 3.86221509e-02],\n",
       "       [4.67588941e-01, 5.32411059e-01],\n",
       "       [3.86978283e-02, 9.61302172e-01],\n",
       "       [9.60069830e-02, 9.03993017e-01],\n",
       "       [9.92543556e-01, 7.45644424e-03],\n",
       "       [1.53246299e-02, 9.84675370e-01],\n",
       "       [9.64802646e-01, 3.51973544e-02],\n",
       "       [2.01468652e-03, 9.97985313e-01],\n",
       "       [4.34573592e-02, 9.56542641e-01],\n",
       "       [9.12012085e-03, 9.90879879e-01],\n",
       "       [2.07517356e-01, 7.92482644e-01],\n",
       "       [9.52603589e-01, 4.73964114e-02],\n",
       "       [6.71380885e-03, 9.93286191e-01],\n",
       "       [3.77742547e-01, 6.22257453e-01],\n",
       "       [4.94637777e-02, 9.50536222e-01],\n",
       "       [7.77698429e-02, 9.22230157e-01],\n",
       "       [3.73354991e-01, 6.26645009e-01],\n",
       "       [1.02140262e-01, 8.97859738e-01],\n",
       "       [4.27345182e-01, 5.72654818e-01],\n",
       "       [1.27569671e-01, 8.72430329e-01],\n",
       "       [4.15731960e-01, 5.84268040e-01],\n",
       "       [9.90780326e-01, 9.21967400e-03],\n",
       "       [4.81158247e-02, 9.51884175e-01],\n",
       "       [9.84588892e-01, 1.54111079e-02],\n",
       "       [1.21276121e-01, 8.78723879e-01],\n",
       "       [9.60664071e-01, 3.93359292e-02],\n",
       "       [3.29741739e-01, 6.70258261e-01],\n",
       "       [3.39706402e-01, 6.60293598e-01],\n",
       "       [9.51290164e-01, 4.87098356e-02],\n",
       "       [9.78947246e-01, 2.10527536e-02],\n",
       "       [8.69616863e-01, 1.30383137e-01],\n",
       "       [4.45445099e-01, 5.54554901e-01],\n",
       "       [9.15914685e-01, 8.40853147e-02],\n",
       "       [8.63605389e-01, 1.36394611e-01],\n",
       "       [8.99838785e-01, 1.00161215e-01],\n",
       "       [6.15540924e-02, 9.38445908e-01],\n",
       "       [9.56224963e-01, 4.37750366e-02],\n",
       "       [9.42161591e-01, 5.78384086e-02],\n",
       "       [8.89545955e-01, 1.10454045e-01],\n",
       "       [4.12710714e-01, 5.87289286e-01],\n",
       "       [4.28208476e-01, 5.71791524e-01],\n",
       "       [9.43467294e-01, 5.65327058e-02],\n",
       "       [4.06912458e-01, 5.93087542e-01],\n",
       "       [1.76311900e-01, 8.23688100e-01],\n",
       "       [1.84553824e-01, 8.15446176e-01],\n",
       "       [9.49859167e-01, 5.01408333e-02],\n",
       "       [1.48957982e-01, 8.51042018e-01],\n",
       "       [9.25569278e-01, 7.44307216e-02],\n",
       "       [9.76076921e-01, 2.39230794e-02],\n",
       "       [9.63308281e-01, 3.66917189e-02],\n",
       "       [5.49730746e-02, 9.45026925e-01],\n",
       "       [2.40991848e-01, 7.59008152e-01],\n",
       "       [9.49688218e-01, 5.03117819e-02],\n",
       "       [1.06836367e-01, 8.93163633e-01],\n",
       "       [2.89135029e-01, 7.10864971e-01],\n",
       "       [2.87794447e-01, 7.12205553e-01],\n",
       "       [9.55733520e-01, 4.42664801e-02],\n",
       "       [1.68436544e-01, 8.31563456e-01],\n",
       "       [4.75684386e-01, 5.24315614e-01],\n",
       "       [7.12386809e-01, 2.87613191e-01],\n",
       "       [9.14246216e-01, 8.57537836e-02],\n",
       "       [8.11514219e-01, 1.88485781e-01],\n",
       "       [5.44229844e-01, 4.55770156e-01],\n",
       "       [4.55520402e-01, 5.44479598e-01],\n",
       "       [8.76614951e-01, 1.23385049e-01],\n",
       "       [9.04588599e-01, 9.54114012e-02],\n",
       "       [3.63769107e-01, 6.36230893e-01],\n",
       "       [9.84205940e-01, 1.57940597e-02],\n",
       "       [3.60213235e-02, 9.63978677e-01],\n",
       "       [8.74100745e-01, 1.25899255e-01],\n",
       "       [9.97630638e-01, 2.36936240e-03],\n",
       "       [2.79646321e-02, 9.72035368e-01],\n",
       "       [8.86789678e-01, 1.13210322e-01],\n",
       "       [9.66731462e-01, 3.32685377e-02],\n",
       "       [1.42622561e-02, 9.85737744e-01],\n",
       "       [9.84539740e-01, 1.54602599e-02],\n",
       "       [9.89948386e-01, 1.00516136e-02],\n",
       "       [2.10380655e-03, 9.97896193e-01],\n",
       "       [9.77567551e-01, 2.24324487e-02],\n",
       "       [1.33434937e-02, 9.86656506e-01],\n",
       "       [9.63784848e-01, 3.62151518e-02],\n",
       "       [6.43496641e-02, 9.35650336e-01],\n",
       "       [5.78974392e-01, 4.21025608e-01],\n",
       "       [1.09266124e-01, 8.90733876e-01],\n",
       "       [6.25665749e-02, 9.37433425e-01],\n",
       "       [1.43351283e-01, 8.56648717e-01],\n",
       "       [9.16327728e-01, 8.36722719e-02],\n",
       "       [9.76857082e-01, 2.31429177e-02],\n",
       "       [4.07283735e-02, 9.59271627e-01],\n",
       "       [1.51858185e-01, 8.48141815e-01],\n",
       "       [9.16717963e-01, 8.32820375e-02],\n",
       "       [1.04406068e-01, 8.95593932e-01],\n",
       "       [2.54621684e-01, 7.45378316e-01],\n",
       "       [9.86360585e-01, 1.36394153e-02],\n",
       "       [1.80045581e-01, 8.19954419e-01],\n",
       "       [4.51776348e-02, 9.54822365e-01],\n",
       "       [2.53981759e-01, 7.46018241e-01],\n",
       "       [1.51089623e-02, 9.84891038e-01],\n",
       "       [9.75069416e-01, 2.49305838e-02],\n",
       "       [9.38518173e-01, 6.14818266e-02],\n",
       "       [6.45671717e-02, 9.35432828e-01],\n",
       "       [8.40483015e-01, 1.59516985e-01],\n",
       "       [9.73878618e-01, 2.61213816e-02],\n",
       "       [9.13644760e-03, 9.90863552e-01],\n",
       "       [8.89291546e-01, 1.10708454e-01],\n",
       "       [8.86942437e-01, 1.13057563e-01],\n",
       "       [2.58332942e-02, 9.74166706e-01],\n",
       "       [1.72317281e-01, 8.27682719e-01],\n",
       "       [9.70389482e-01, 2.96105177e-02],\n",
       "       [4.90407351e-02, 9.50959265e-01],\n",
       "       [9.86457527e-01, 1.35424731e-02],\n",
       "       [9.15455521e-01, 8.45444791e-02],\n",
       "       [2.65562927e-02, 9.73443707e-01],\n",
       "       [9.82649797e-01, 1.73502034e-02],\n",
       "       [8.83553333e-01, 1.16446667e-01],\n",
       "       [7.03045746e-01, 2.96954254e-01],\n",
       "       [9.64000972e-01, 3.59990276e-02],\n",
       "       [2.18162878e-05, 9.99978184e-01],\n",
       "       [9.20927512e-01, 7.90724878e-02],\n",
       "       [3.17877409e-01, 6.82122591e-01],\n",
       "       [1.94397475e-01, 8.05602525e-01],\n",
       "       [8.66221013e-01, 1.33778987e-01],\n",
       "       [9.64829296e-04, 9.99035171e-01],\n",
       "       [9.05655326e-01, 9.43446738e-02],\n",
       "       [9.18763980e-01, 8.12360196e-02],\n",
       "       [9.25314850e-01, 7.46851502e-02],\n",
       "       [9.02641537e-01, 9.73584635e-02],\n",
       "       [9.77844251e-01, 2.21557488e-02],\n",
       "       [9.64356699e-01, 3.56433011e-02],\n",
       "       [9.41148340e-01, 5.88516599e-02],\n",
       "       [8.35143709e-01, 1.64856291e-01],\n",
       "       [9.56320505e-01, 4.36794951e-02],\n",
       "       [7.73313508e-01, 2.26686492e-01],\n",
       "       [1.57057989e-01, 8.42942011e-01],\n",
       "       [2.99287673e-01, 7.00712327e-01],\n",
       "       [9.13055424e-01, 8.69445761e-02],\n",
       "       [9.38002096e-01, 6.19979044e-02],\n",
       "       [9.55969898e-01, 4.40301018e-02],\n",
       "       [8.72599529e-01, 1.27400471e-01],\n",
       "       [3.38242287e-01, 6.61757713e-01],\n",
       "       [9.61178245e-01, 3.88217550e-02],\n",
       "       [5.41314167e-01, 4.58685833e-01],\n",
       "       [9.67396669e-01, 3.26033306e-02],\n",
       "       [9.37315359e-01, 6.26846407e-02],\n",
       "       [4.48105774e-01, 5.51894226e-01],\n",
       "       [9.73100616e-01, 2.68993838e-02],\n",
       "       [8.17997790e-01, 1.82002210e-01],\n",
       "       [9.83646571e-01, 1.63534291e-02],\n",
       "       [1.67916186e-02, 9.83208381e-01],\n",
       "       [3.21295625e-01, 6.78704375e-01],\n",
       "       [9.66202353e-01, 3.37976472e-02],\n",
       "       [3.89017025e-01, 6.10982975e-01],\n",
       "       [1.83770697e-01, 8.16229303e-01],\n",
       "       [1.18087519e-01, 8.81912481e-01],\n",
       "       [9.72245639e-01, 2.77543611e-02],\n",
       "       [3.92830915e-02, 9.60716909e-01],\n",
       "       [3.52844531e-02, 9.64715547e-01],\n",
       "       [8.77258636e-01, 1.22741364e-01],\n",
       "       [9.32897723e-01, 6.71022772e-02],\n",
       "       [1.35012176e-01, 8.64987824e-01],\n",
       "       [7.95878913e-01, 2.04121087e-01],\n",
       "       [9.79654681e-01, 2.03453190e-02],\n",
       "       [9.11753590e-01, 8.82464105e-02],\n",
       "       [9.82420468e-01, 1.75795322e-02],\n",
       "       [3.13165552e-01, 6.86834448e-01],\n",
       "       [1.70723716e-03, 9.98292763e-01],\n",
       "       [8.00184809e-01, 1.99815191e-01],\n",
       "       [8.77107731e-01, 1.22892269e-01],\n",
       "       [9.16541931e-02, 9.08345807e-01],\n",
       "       [1.87952105e-01, 8.12047895e-01],\n",
       "       [9.91031806e-01, 8.96819386e-03],\n",
       "       [9.02544143e-01, 9.74558570e-02],\n",
       "       [8.76356994e-02, 9.12364301e-01],\n",
       "       [8.45193501e-01, 1.54806499e-01],\n",
       "       [3.01909608e-11, 1.00000000e+00],\n",
       "       [3.63536380e-02, 9.63646362e-01],\n",
       "       [5.01799901e-01, 4.98200099e-01],\n",
       "       [9.06535668e-01, 9.34643324e-02],\n",
       "       [1.45855504e-01, 8.54144496e-01],\n",
       "       [3.09784835e-01, 6.90215165e-01],\n",
       "       [9.81363694e-01, 1.86363063e-02],\n",
       "       [9.44246547e-03, 9.90557535e-01],\n",
       "       [9.90849839e-01, 9.15016135e-03],\n",
       "       [3.21281597e-01, 6.78718403e-01],\n",
       "       [1.64357067e-01, 8.35642933e-01],\n",
       "       [7.47990753e-02, 9.25200925e-01],\n",
       "       [1.18966573e-01, 8.81033427e-01],\n",
       "       [6.35728219e-02, 9.36427178e-01],\n",
       "       [4.36239431e-02, 9.56376057e-01],\n",
       "       [2.83102810e-01, 7.16897190e-01],\n",
       "       [3.80745803e-01, 6.19254197e-01],\n",
       "       [5.94989839e-01, 4.05010161e-01],\n",
       "       [9.35006086e-01, 6.49939145e-02],\n",
       "       [9.73041446e-01, 2.69585535e-02],\n",
       "       [1.05962710e-01, 8.94037290e-01],\n",
       "       [9.09783168e-01, 9.02168318e-02],\n",
       "       [1.07034356e-01, 8.92965644e-01],\n",
       "       [7.77640969e-01, 2.22359031e-01],\n",
       "       [1.74939767e-01, 8.25060233e-01],\n",
       "       [9.68318422e-01, 3.16815775e-02],\n",
       "       [9.80116097e-01, 1.98839029e-02],\n",
       "       [8.88642432e-01, 1.11357568e-01],\n",
       "       [5.00992009e-02, 9.49900799e-01],\n",
       "       [2.21983657e-03, 9.97780163e-01],\n",
       "       [9.86674066e-01, 1.33259335e-02],\n",
       "       [9.04178291e-01, 9.58217095e-02],\n",
       "       [1.81771788e-01, 8.18228212e-01],\n",
       "       [2.74183678e-01, 7.25816322e-01],\n",
       "       [9.09342924e-01, 9.06570760e-02],\n",
       "       [3.33934106e-01, 6.66065894e-01],\n",
       "       [8.75753968e-01, 1.24246032e-01],\n",
       "       [8.61375116e-01, 1.38624884e-01],\n",
       "       [8.64069393e-01, 1.35930607e-01],\n",
       "       [9.53936023e-01, 4.60639766e-02],\n",
       "       [9.23510776e-01, 7.64892239e-02],\n",
       "       [3.08401159e-03, 9.96915988e-01],\n",
       "       [1.89512063e-01, 8.10487937e-01],\n",
       "       [8.30705634e-02, 9.16929437e-01],\n",
       "       [8.94161529e-01, 1.05838471e-01],\n",
       "       [1.64319307e-01, 8.35680693e-01],\n",
       "       [4.02776040e-02, 9.59722396e-01],\n",
       "       [8.02800453e-01, 1.97199547e-01],\n",
       "       [2.67143998e-02, 9.73285600e-01],\n",
       "       [9.74109021e-03, 9.90258910e-01],\n",
       "       [9.71258513e-01, 2.87414865e-02],\n",
       "       [1.16108168e-01, 8.83891832e-01],\n",
       "       [3.26664303e-01, 6.73335697e-01],\n",
       "       [9.55608621e-01, 4.43913790e-02],\n",
       "       [9.30033628e-01, 6.99663722e-02],\n",
       "       [9.80459129e-01, 1.95408712e-02],\n",
       "       [9.14719545e-01, 8.52804552e-02],\n",
       "       [9.54622179e-01, 4.53778212e-02],\n",
       "       [9.36077400e-01, 6.39226001e-02],\n",
       "       [2.26922802e-01, 7.73077198e-01],\n",
       "       [1.85680033e-04, 9.99814320e-01],\n",
       "       [9.87945085e-01, 1.20549145e-02],\n",
       "       [3.40980327e-01, 6.59019673e-01],\n",
       "       [1.79938198e-01, 8.20061802e-01],\n",
       "       [8.57647497e-01, 1.42352503e-01],\n",
       "       [3.55733648e-01, 6.44266352e-01],\n",
       "       [9.78252797e-01, 2.17472031e-02],\n",
       "       [7.35126364e-02, 9.26487364e-01],\n",
       "       [9.10628496e-01, 8.93715044e-02],\n",
       "       [7.07140333e-01, 2.92859667e-01],\n",
       "       [9.74821589e-01, 2.51784105e-02],\n",
       "       [7.12996641e-02, 9.28700336e-01],\n",
       "       [6.63353261e-02, 9.33664674e-01],\n",
       "       [2.98266049e-03, 9.97017340e-01],\n",
       "       [5.12368151e-01, 4.87631849e-01],\n",
       "       [9.12099312e-01, 8.79006877e-02],\n",
       "       [8.86118259e-01, 1.13881741e-01],\n",
       "       [7.10444738e-02, 9.28955526e-01],\n",
       "       [2.41163065e-01, 7.58836935e-01],\n",
       "       [8.39246589e-02, 9.16075341e-01],\n",
       "       [5.51344083e-01, 4.48655917e-01],\n",
       "       [9.87162091e-01, 1.28379091e-02],\n",
       "       [9.67077807e-01, 3.29221932e-02],\n",
       "       [8.22409930e-02, 9.17759007e-01],\n",
       "       [8.45048775e-01, 1.54951225e-01],\n",
       "       [9.89812905e-01, 1.01870952e-02],\n",
       "       [2.54788893e-02, 9.74521111e-01],\n",
       "       [3.80558545e-01, 6.19441455e-01],\n",
       "       [1.14721560e-01, 8.85278440e-01],\n",
       "       [4.78521713e-02, 9.52147829e-01],\n",
       "       [8.60156529e-01, 1.39843471e-01],\n",
       "       [6.06016251e-01, 3.93983749e-01],\n",
       "       [9.66488534e-01, 3.35114663e-02],\n",
       "       [9.80286994e-01, 1.97130065e-02],\n",
       "       [5.55909224e-01, 4.44090776e-01],\n",
       "       [1.63030387e-01, 8.36969613e-01],\n",
       "       [9.83636251e-01, 1.63637488e-02],\n",
       "       [7.51731590e-01, 2.48268410e-01],\n",
       "       [1.22725267e-01, 8.77274733e-01],\n",
       "       [9.33287131e-01, 6.67128688e-02],\n",
       "       [9.32299125e-01, 6.77008749e-02],\n",
       "       [3.13517186e-01, 6.86482814e-01],\n",
       "       [9.43568783e-01, 5.64312170e-02],\n",
       "       [8.93186649e-01, 1.06813351e-01],\n",
       "       [4.21445233e-01, 5.78554767e-01],\n",
       "       [2.89777308e-02, 9.71022269e-01],\n",
       "       [1.23015837e-01, 8.76984163e-01],\n",
       "       [8.50689289e-01, 1.49310711e-01],\n",
       "       [4.47050502e-01, 5.52949498e-01],\n",
       "       [1.35918601e-01, 8.64081399e-01],\n",
       "       [6.93251148e-02, 9.30674885e-01],\n",
       "       [2.57723967e-01, 7.42276033e-01],\n",
       "       [5.37852767e-01, 4.62147233e-01],\n",
       "       [4.03105861e-02, 9.59689414e-01],\n",
       "       [8.24911297e-01, 1.75088703e-01],\n",
       "       [2.41886991e-01, 7.58113009e-01],\n",
       "       [4.28414908e-02, 9.57158509e-01],\n",
       "       [9.05972036e-01, 9.40279637e-02],\n",
       "       [9.60591178e-01, 3.94088217e-02],\n",
       "       [9.89799462e-01, 1.02005376e-02],\n",
       "       [7.18275431e-02, 9.28172457e-01],\n",
       "       [5.80086385e-01, 4.19913615e-01],\n",
       "       [9.76551467e-01, 2.34485333e-02],\n",
       "       [1.45182036e-01, 8.54817964e-01],\n",
       "       [8.34999402e-01, 1.65000598e-01],\n",
       "       [9.79228776e-01, 2.07712244e-02],\n",
       "       [7.64100629e-01, 2.35899371e-01],\n",
       "       [8.92072666e-01, 1.07927334e-01],\n",
       "       [3.31056734e-01, 6.68943266e-01],\n",
       "       [9.75269339e-01, 2.47306614e-02],\n",
       "       [3.51020979e-01, 6.48979021e-01],\n",
       "       [1.28019522e-02, 9.87198048e-01],\n",
       "       [3.67978467e-01, 6.32021533e-01],\n",
       "       [9.41484572e-02, 9.05851543e-01],\n",
       "       [9.07864364e-01, 9.21356357e-02],\n",
       "       [9.79665593e-01, 2.03344068e-02],\n",
       "       [2.02601821e-02, 9.79739818e-01],\n",
       "       [7.50427714e-01, 2.49572286e-01],\n",
       "       [8.47465998e-02, 9.15253400e-01]])"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_probas = model.predict_proba(X_train)\n",
    "pred_probas \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_probas = pred_probas.T[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(482,)"
      ]
     },
     "execution_count": 253,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_probas.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "thresholds = []\n",
    "f1s = []\n",
    "recalls = []\n",
    "precisions = []\n",
    "accuracies = []\n",
    "for threshold in np.arange(0.1, 1, 0.01):\n",
    "    y_pred = np.where(pred_probas >= threshold, 1, 0)\n",
    "    acc = accuracy_score(y_train, y_pred)\n",
    "    f1 = f1_score(y_train, y_pred)\n",
    "    rec = recall_score(y_train, y_pred)\n",
    "    pre = precision_score(y_train, y_pred)\n",
    "    if acc >= 0.86:\n",
    "        thresholds.append(threshold)\n",
    "        f1s.append(f1)\n",
    "        accuracies.append(acc)\n",
    "        precisions.append(pre)\n",
    "        recalls.append(rec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.24</th>\n",
       "      <th>0.25</th>\n",
       "      <th>0.26</th>\n",
       "      <th>0.27</th>\n",
       "      <th>0.28</th>\n",
       "      <th>0.29</th>\n",
       "      <th>0.30</th>\n",
       "      <th>0.31</th>\n",
       "      <th>0.32</th>\n",
       "      <th>0.33</th>\n",
       "      <th>...</th>\n",
       "      <th>0.58</th>\n",
       "      <th>0.59</th>\n",
       "      <th>0.60</th>\n",
       "      <th>0.61</th>\n",
       "      <th>0.62</th>\n",
       "      <th>0.63</th>\n",
       "      <th>0.64</th>\n",
       "      <th>0.65</th>\n",
       "      <th>0.66</th>\n",
       "      <th>0.67</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>accuracy</th>\n",
       "      <td>0.860996</td>\n",
       "      <td>0.867220</td>\n",
       "      <td>0.867220</td>\n",
       "      <td>0.867220</td>\n",
       "      <td>0.865145</td>\n",
       "      <td>0.867220</td>\n",
       "      <td>0.871369</td>\n",
       "      <td>0.871369</td>\n",
       "      <td>0.873444</td>\n",
       "      <td>0.873444</td>\n",
       "      <td>...</td>\n",
       "      <td>0.877593</td>\n",
       "      <td>0.871369</td>\n",
       "      <td>0.869295</td>\n",
       "      <td>0.869295</td>\n",
       "      <td>0.869295</td>\n",
       "      <td>0.871369</td>\n",
       "      <td>0.875519</td>\n",
       "      <td>0.871369</td>\n",
       "      <td>0.869295</td>\n",
       "      <td>0.860996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>recall</th>\n",
       "      <td>0.933036</td>\n",
       "      <td>0.933036</td>\n",
       "      <td>0.928571</td>\n",
       "      <td>0.928571</td>\n",
       "      <td>0.924107</td>\n",
       "      <td>0.924107</td>\n",
       "      <td>0.924107</td>\n",
       "      <td>0.924107</td>\n",
       "      <td>0.924107</td>\n",
       "      <td>0.924107</td>\n",
       "      <td>...</td>\n",
       "      <td>0.866071</td>\n",
       "      <td>0.852679</td>\n",
       "      <td>0.843750</td>\n",
       "      <td>0.843750</td>\n",
       "      <td>0.834821</td>\n",
       "      <td>0.825893</td>\n",
       "      <td>0.821429</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0.808036</td>\n",
       "      <td>0.790179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>precision</th>\n",
       "      <td>0.800766</td>\n",
       "      <td>0.810078</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0.812500</td>\n",
       "      <td>0.811765</td>\n",
       "      <td>0.814961</td>\n",
       "      <td>0.821429</td>\n",
       "      <td>0.821429</td>\n",
       "      <td>0.824701</td>\n",
       "      <td>0.824701</td>\n",
       "      <td>...</td>\n",
       "      <td>0.869955</td>\n",
       "      <td>0.868182</td>\n",
       "      <td>0.870968</td>\n",
       "      <td>0.870968</td>\n",
       "      <td>0.877934</td>\n",
       "      <td>0.889423</td>\n",
       "      <td>0.901961</td>\n",
       "      <td>0.900990</td>\n",
       "      <td>0.900498</td>\n",
       "      <td>0.898477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f1</th>\n",
       "      <td>0.861856</td>\n",
       "      <td>0.867220</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.866667</td>\n",
       "      <td>0.864301</td>\n",
       "      <td>0.866109</td>\n",
       "      <td>0.869748</td>\n",
       "      <td>0.869748</td>\n",
       "      <td>0.871579</td>\n",
       "      <td>0.871579</td>\n",
       "      <td>...</td>\n",
       "      <td>0.868009</td>\n",
       "      <td>0.860360</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>0.855835</td>\n",
       "      <td>0.856481</td>\n",
       "      <td>0.859813</td>\n",
       "      <td>0.854460</td>\n",
       "      <td>0.851765</td>\n",
       "      <td>0.840855</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               0.24      0.25      0.26      0.27      0.28      0.29  \\\n",
       "accuracy   0.860996  0.867220  0.867220  0.867220  0.865145  0.867220   \n",
       "recall     0.933036  0.933036  0.928571  0.928571  0.924107  0.924107   \n",
       "precision  0.800766  0.810078  0.812500  0.812500  0.811765  0.814961   \n",
       "f1         0.861856  0.867220  0.866667  0.866667  0.864301  0.866109   \n",
       "\n",
       "               0.30      0.31      0.32      0.33  ...      0.58      0.59  \\\n",
       "accuracy   0.871369  0.871369  0.873444  0.873444  ...  0.877593  0.871369   \n",
       "recall     0.924107  0.924107  0.924107  0.924107  ...  0.866071  0.852679   \n",
       "precision  0.821429  0.821429  0.824701  0.824701  ...  0.869955  0.868182   \n",
       "f1         0.869748  0.869748  0.871579  0.871579  ...  0.868009  0.860360   \n",
       "\n",
       "               0.60      0.61      0.62      0.63      0.64      0.65  \\\n",
       "accuracy   0.869295  0.869295  0.869295  0.871369  0.875519  0.871369   \n",
       "recall     0.843750  0.843750  0.834821  0.825893  0.821429  0.812500   \n",
       "precision  0.870968  0.870968  0.877934  0.889423  0.901961  0.900990   \n",
       "f1         0.857143  0.857143  0.855835  0.856481  0.859813  0.854460   \n",
       "\n",
       "               0.66      0.67  \n",
       "accuracy   0.869295  0.860996  \n",
       "recall     0.808036  0.790179  \n",
       "precision  0.900498  0.898477  \n",
       "f1         0.851765  0.840855  \n",
       "\n",
       "[4 rows x 44 columns]"
      ]
     },
     "execution_count": 259,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(data = [accuracies, recalls, precisions, f1s], columns = thresholds, index = [ 'accuracy', 'recall', 'precision', 'f1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max f1: 0.87 threshold: 0.4\n",
      "max recall: 0.93 threshold: 0.24\n",
      "max precision: 0.9 threshold: 0.64\n"
     ]
    }
   ],
   "source": [
    "print('max f1:', round(max(f1s), 2), 'threshold:', round(thresholds[f1s.index(max(f1s))], 2))\n",
    "print('max recall:', round(max(recalls), 2), 'threshold:', round(thresholds[recalls.index(max(recalls))], 2))\n",
    "print('max precision:', round(max(precisions), 2), 'threshold:', round(thresholds[precisions.index(max(precisions))], 2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Да, логистическая регрессия справилась с задачей гораздо лучше."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
